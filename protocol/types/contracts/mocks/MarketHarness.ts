/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MarketHarnessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_SEPARATOR"
      | "EMERGENCY_ADMIN_ROLE"
      | "PAUSER_ROLE"
      | "accountSnapshot"
      | "accounts"
      | "allowance"
      | "approve"
      | "asset"
      | "auditor"
      | "backupFeeRate"
      | "balanceOf"
      | "borrow"
      | "borrowAtMaturity"
      | "borrowMaturityWithReturnValue"
      | "clearBadDebt"
      | "convertToAssets"
      | "convertToShares"
      | "dampSpeedDown"
      | "dampSpeedUp"
      | "decimals"
      | "deposit"
      | "depositAtMaturity"
      | "depositMaturityWithReturnValue"
      | "earningsAccumulator"
      | "earningsAccumulatorSmoothFactor"
      | "fixedBorrowPositions"
      | "fixedDepositPositions"
      | "fixedPoolBalance"
      | "fixedPoolBorrowed"
      | "fixedPools"
      | "floatingAssets"
      | "floatingAssetsAverage"
      | "floatingBackupBorrowed"
      | "floatingDebt"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "interestRateModel"
      | "isFrozen"
      | "lastAccumulatorAccrual"
      | "lastAverageUpdate"
      | "lastFloatingDebtUpdate"
      | "liquidate"
      | "maxDeposit"
      | "maxFuturePools"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint"
      | "name"
      | "nonces"
      | "pause"
      | "paused"
      | "penaltyRate"
      | "permit"
      | "previewBorrow"
      | "previewDebt"
      | "previewDeposit"
      | "previewFloatingAssetsAverage"
      | "previewMint"
      | "previewRedeem"
      | "previewRefund"
      | "previewRepay"
      | "previewWithdraw"
      | "redeem"
      | "refund"
      | "renounceRole"
      | "repay"
      | "repayAtMaturity"
      | "repayMaturityWithReturnValue"
      | "reserveFactor"
      | "returnValue"
      | "revokeRole"
      | "rewardsController"
      | "seize"
      | "setAssetSymbol"
      | "setBackupFeeRate"
      | "setDampSpeed"
      | "setEarningsAccumulatorSmoothFactor"
      | "setFreePenaltyRate"
      | "setFrozen"
      | "setInterestRateModel"
      | "setMaxFuturePools"
      | "setPenaltyRate"
      | "setReserveFactor"
      | "setRewardsController"
      | "setTreasury"
      | "supportsInterface"
      | "symbol"
      | "totalAssets"
      | "totalFloatingBorrowAssets"
      | "totalFloatingBorrowShares"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "treasury"
      | "treasuryFeeRate"
      | "unpause"
      | "withdraw"
      | "withdrawAtMaturity"
      | "withdrawMaturityWithReturnValue"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccumulatorAccrual"
      | "Approval"
      | "BackupFeeRateSet"
      | "Borrow"
      | "BorrowAtMaturity"
      | "DampSpeedSet"
      | "Deposit"
      | "DepositAtMaturity"
      | "EarningsAccumulatorSmoothFactorSet"
      | "FixedEarningsUpdate"
      | "FloatingDebtUpdate"
      | "Frozen"
      | "Initialized"
      | "InterestRateModelSet"
      | "Liquidate"
      | "MarketUpdate"
      | "MaxFuturePoolsSet"
      | "Paused"
      | "PenaltyRateSet"
      | "Repay"
      | "RepayAtMaturity"
      | "ReserveFactorSet"
      | "RewardsControllerSet"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Seize"
      | "SpreadBadDebt"
      | "Transfer"
      | "TreasurySet"
      | "Unpaused"
      | "Withdraw"
      | "WithdrawAtMaturity"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "auditor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "backupFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAtMaturity",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowMaturityWithReturnValue",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearBadDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dampSpeedDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dampSpeedUp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAtMaturity",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMaturityWithReturnValue",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "earningsAccumulator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earningsAccumulatorSmoothFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedBorrowPositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedDepositPositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedPoolBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedPoolBorrowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floatingAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floatingAssetsAverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floatingBackupBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floatingDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastAccumulatorAccrual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAverageUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastFloatingDebtUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFuturePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewFloatingAssetsAverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRepay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAtMaturity",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayMaturityWithReturnValue",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetSymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackupFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDampSpeed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarningsAccumulatorSmoothFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreePenaltyRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFrozen", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setInterestRateModel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxFuturePools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFloatingBorrowAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFloatingBorrowShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAtMaturity",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMaturityWithReturnValue",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auditor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "backupFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowMaturityWithReturnValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearBadDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dampSpeedDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dampSpeedUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMaturityWithReturnValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earningsAccumulator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earningsAccumulatorSmoothFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedBorrowPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedDepositPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedPoolBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fixedPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "floatingAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floatingAssetsAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floatingBackupBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floatingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastAccumulatorAccrual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAverageUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFloatingDebtUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFuturePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewFloatingAssetsAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayMaturityWithReturnValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackupFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDampSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarningsAccumulatorSmoothFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreePenaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxFuturePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFloatingBorrowAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFloatingBorrowShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMaturityWithReturnValue",
    data: BytesLike
  ): Result;
}

export namespace AccumulatorAccrualEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BackupFeeRateSetEvent {
  export type InputTuple = [backupFeeRate: BigNumberish];
  export type OutputTuple = [backupFeeRate: bigint];
  export interface OutputObject {
    backupFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    borrower: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    borrower: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    borrower: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowAtMaturityEvent {
  export type InputTuple = [
    maturity: BigNumberish,
    caller: AddressLike,
    receiver: AddressLike,
    borrower: AddressLike,
    assets: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    maturity: bigint,
    caller: string,
    receiver: string,
    borrower: string,
    assets: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    maturity: bigint;
    caller: string;
    receiver: string;
    borrower: string;
    assets: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DampSpeedSetEvent {
  export type InputTuple = [
    dampSpeedUp: BigNumberish,
    dampSpeedDown: BigNumberish
  ];
  export type OutputTuple = [dampSpeedUp: bigint, dampSpeedDown: bigint];
  export interface OutputObject {
    dampSpeedUp: bigint;
    dampSpeedDown: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositAtMaturityEvent {
  export type InputTuple = [
    maturity: BigNumberish,
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    maturity: bigint,
    caller: string,
    owner: string,
    assets: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    maturity: bigint;
    caller: string;
    owner: string;
    assets: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EarningsAccumulatorSmoothFactorSetEvent {
  export type InputTuple = [earningsAccumulatorSmoothFactor: BigNumberish];
  export type OutputTuple = [earningsAccumulatorSmoothFactor: bigint];
  export interface OutputObject {
    earningsAccumulatorSmoothFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FixedEarningsUpdateEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    maturity: BigNumberish,
    unassignedEarnings: BigNumberish
  ];
  export type OutputTuple = [
    timestamp: bigint,
    maturity: bigint,
    unassignedEarnings: bigint
  ];
  export interface OutputObject {
    timestamp: bigint;
    maturity: bigint;
    unassignedEarnings: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FloatingDebtUpdateEvent {
  export type InputTuple = [timestamp: BigNumberish, utilization: BigNumberish];
  export type OutputTuple = [timestamp: bigint, utilization: bigint];
  export interface OutputObject {
    timestamp: bigint;
    utilization: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FrozenEvent {
  export type InputTuple = [account: AddressLike, isFrozen: boolean];
  export type OutputTuple = [account: string, isFrozen: boolean];
  export interface OutputObject {
    account: string;
    isFrozen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestRateModelSetEvent {
  export type InputTuple = [interestRateModel: AddressLike];
  export type OutputTuple = [interestRateModel: string];
  export interface OutputObject {
    interestRateModel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    receiver: AddressLike,
    borrower: AddressLike,
    assets: BigNumberish,
    lendersAssets: BigNumberish,
    seizeMarket: AddressLike,
    seizedAssets: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    borrower: string,
    assets: bigint,
    lendersAssets: bigint,
    seizeMarket: string,
    seizedAssets: bigint
  ];
  export interface OutputObject {
    receiver: string;
    borrower: string;
    assets: bigint;
    lendersAssets: bigint;
    seizeMarket: string;
    seizedAssets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketUpdateEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    floatingDepositShares: BigNumberish,
    floatingAssets: BigNumberish,
    floatingBorrowShares: BigNumberish,
    floatingDebt: BigNumberish,
    earningsAccumulator: BigNumberish
  ];
  export type OutputTuple = [
    timestamp: bigint,
    floatingDepositShares: bigint,
    floatingAssets: bigint,
    floatingBorrowShares: bigint,
    floatingDebt: bigint,
    earningsAccumulator: bigint
  ];
  export interface OutputObject {
    timestamp: bigint;
    floatingDepositShares: bigint;
    floatingAssets: bigint;
    floatingBorrowShares: bigint;
    floatingDebt: bigint;
    earningsAccumulator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxFuturePoolsSetEvent {
  export type InputTuple = [maxFuturePools: BigNumberish];
  export type OutputTuple = [maxFuturePools: bigint];
  export interface OutputObject {
    maxFuturePools: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PenaltyRateSetEvent {
  export type InputTuple = [penaltyRate: BigNumberish];
  export type OutputTuple = [penaltyRate: bigint];
  export interface OutputObject {
    penaltyRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    caller: AddressLike,
    borrower: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    borrower: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    borrower: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayAtMaturityEvent {
  export type InputTuple = [
    maturity: BigNumberish,
    caller: AddressLike,
    borrower: AddressLike,
    assets: BigNumberish,
    positionAssets: BigNumberish
  ];
  export type OutputTuple = [
    maturity: bigint,
    caller: string,
    borrower: string,
    assets: bigint,
    positionAssets: bigint
  ];
  export interface OutputObject {
    maturity: bigint;
    caller: string;
    borrower: string;
    assets: bigint;
    positionAssets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFactorSetEvent {
  export type InputTuple = [reserveFactor: BigNumberish];
  export type OutputTuple = [reserveFactor: bigint];
  export interface OutputObject {
    reserveFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsControllerSetEvent {
  export type InputTuple = [rewardsController: AddressLike];
  export type OutputTuple = [rewardsController: string];
  export interface OutputObject {
    rewardsController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeizeEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    assets: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpreadBadDebtEvent {
  export type InputTuple = [borrower: AddressLike, assets: BigNumberish];
  export type OutputTuple = [borrower: string, assets: bigint];
  export interface OutputObject {
    borrower: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySetEvent {
  export type InputTuple = [
    treasury: AddressLike,
    treasuryFeeRate: BigNumberish
  ];
  export type OutputTuple = [treasury: string, treasuryFeeRate: bigint];
  export interface OutputObject {
    treasury: string;
    treasuryFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawAtMaturityEvent {
  export type InputTuple = [
    maturity: BigNumberish,
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    positionAssets: BigNumberish,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    maturity: bigint,
    caller: string,
    receiver: string,
    owner: string,
    positionAssets: bigint,
    assets: bigint
  ];
  export interface OutputObject {
    maturity: bigint;
    caller: string;
    receiver: string;
    owner: string;
    positionAssets: bigint;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketHarness extends BaseContract {
  connect(runner?: ContractRunner | null): MarketHarness;
  waitForDeployment(): Promise<this>;

  interface: MarketHarnessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  EMERGENCY_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  accountSnapshot: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  accounts: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        fixedDeposits: bigint;
        fixedBorrows: bigint;
        floatingBorrowShares: bigint;
      }
    ],
    "view"
  >;

  allowance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  auditor: TypedContractMethod<[], [string], "view">;

  backupFeeRate: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  borrow: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, borrower: AddressLike],
    [bigint],
    "nonpayable"
  >;

  borrowAtMaturity: TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      maxAssets: BigNumberish,
      receiver: AddressLike,
      borrower: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  borrowMaturityWithReturnValue: TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      maxAssetsAllowed: BigNumberish,
      receiver: AddressLike,
      borrower: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  clearBadDebt: TypedContractMethod<
    [borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  dampSpeedDown: TypedContractMethod<[], [bigint], "view">;

  dampSpeedUp: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  depositAtMaturity: TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  depositMaturityWithReturnValue: TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  earningsAccumulator: TypedContractMethod<[], [bigint], "view">;

  earningsAccumulatorSmoothFactor: TypedContractMethod<[], [bigint], "view">;

  fixedBorrowPositions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { principal: bigint; fee: bigint }],
    "view"
  >;

  fixedDepositPositions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { principal: bigint; fee: bigint }],
    "view"
  >;

  fixedPoolBalance: TypedContractMethod<
    [maturity: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  fixedPoolBorrowed: TypedContractMethod<
    [maturity: BigNumberish],
    [bigint],
    "view"
  >;

  fixedPools: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        borrowed: bigint;
        supplied: bigint;
        unassignedEarnings: bigint;
        lastAccrual: bigint;
      }
    ],
    "view"
  >;

  floatingAssets: TypedContractMethod<[], [bigint], "view">;

  floatingAssetsAverage: TypedContractMethod<[], [bigint], "view">;

  floatingBackupBorrowed: TypedContractMethod<[], [bigint], "view">;

  floatingDebt: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      assetSymbol: string,
      maxFuturePools_: BigNumberish,
      earningsAccumulatorSmoothFactor_: BigNumberish,
      interestRateModel_: AddressLike,
      penaltyRate_: BigNumberish,
      backupFeeRate_: BigNumberish,
      reserveFactor_: BigNumberish,
      dampSpeedUp_: BigNumberish,
      dampSpeedDown_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  interestRateModel: TypedContractMethod<[], [string], "view">;

  isFrozen: TypedContractMethod<[], [boolean], "view">;

  lastAccumulatorAccrual: TypedContractMethod<[], [bigint], "view">;

  lastAverageUpdate: TypedContractMethod<[], [bigint], "view">;

  lastFloatingDebtUpdate: TypedContractMethod<[], [bigint], "view">;

  liquidate: TypedContractMethod<
    [borrower: AddressLike, maxAssets: BigNumberish, seizeMarket: AddressLike],
    [bigint],
    "nonpayable"
  >;

  maxDeposit: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxFuturePools: TypedContractMethod<[], [bigint], "view">;

  maxMint: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  mint: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  penaltyRate: TypedContractMethod<[], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  previewBorrow: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  previewDebt: TypedContractMethod<[borrower: AddressLike], [bigint], "view">;

  previewDeposit: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  previewFloatingAssetsAverage: TypedContractMethod<[], [bigint], "view">;

  previewMint: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewRefund: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewRepay: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  previewWithdraw: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  refund: TypedContractMethod<
    [borrowShares: BigNumberish, borrower: AddressLike],
    [[bigint, bigint] & { assets: bigint; actualShares: bigint }],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<
    [assets: BigNumberish, borrower: AddressLike],
    [[bigint, bigint] & { actualRepay: bigint; borrowShares: bigint }],
    "nonpayable"
  >;

  repayAtMaturity: TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      maxAssets: BigNumberish,
      borrower: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  repayMaturityWithReturnValue: TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      maxAssetsAllowed: BigNumberish,
      borrower: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  reserveFactor: TypedContractMethod<[], [bigint], "view">;

  returnValue: TypedContractMethod<[], [bigint], "view">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardsController: TypedContractMethod<[], [string], "view">;

  seize: TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, assets: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAssetSymbol: TypedContractMethod<
    [assetSymbol: string],
    [void],
    "nonpayable"
  >;

  setBackupFeeRate: TypedContractMethod<
    [backupFeeRate_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDampSpeed: TypedContractMethod<
    [up: BigNumberish, down: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEarningsAccumulatorSmoothFactor: TypedContractMethod<
    [earningsAccumulatorSmoothFactor_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFreePenaltyRate: TypedContractMethod<
    [penaltyRate_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFrozen: TypedContractMethod<[isFrozen_: boolean], [void], "nonpayable">;

  setInterestRateModel: TypedContractMethod<
    [interestRateModel_: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxFuturePools: TypedContractMethod<
    [futurePools: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPenaltyRate: TypedContractMethod<
    [penaltyRate_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReserveFactor: TypedContractMethod<
    [reserveFactor_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardsController: TypedContractMethod<
    [rewardsController_: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [treasury_: AddressLike, treasuryFeeRate_: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalFloatingBorrowAssets: TypedContractMethod<[], [bigint], "view">;

  totalFloatingBorrowShares: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, shares: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, shares: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  treasuryFeeRate: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  withdrawAtMaturity: TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  withdrawMaturityWithReturnValue: TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountSnapshot"
  ): TypedContractMethod<[account: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        fixedDeposits: bigint;
        fixedBorrows: bigint;
        floatingBorrowShares: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auditor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "backupFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, borrower: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowAtMaturity"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      maxAssets: BigNumberish,
      receiver: AddressLike,
      borrower: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowMaturityWithReturnValue"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      maxAssetsAllowed: BigNumberish,
      receiver: AddressLike,
      borrower: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clearBadDebt"
  ): TypedContractMethod<[borrower: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dampSpeedDown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dampSpeedUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositAtMaturity"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositMaturityWithReturnValue"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earningsAccumulator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "earningsAccumulatorSmoothFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedBorrowPositions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { principal: bigint; fee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "fixedDepositPositions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { principal: bigint; fee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "fixedPoolBalance"
  ): TypedContractMethod<[maturity: BigNumberish], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "fixedPoolBorrowed"
  ): TypedContractMethod<[maturity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedPools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        borrowed: bigint;
        supplied: bigint;
        unassignedEarnings: bigint;
        lastAccrual: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "floatingAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "floatingAssetsAverage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "floatingBackupBorrowed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "floatingDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      assetSymbol: string,
      maxFuturePools_: BigNumberish,
      earningsAccumulatorSmoothFactor_: BigNumberish,
      interestRateModel_: AddressLike,
      penaltyRate_: BigNumberish,
      backupFeeRate_: BigNumberish,
      reserveFactor_: BigNumberish,
      dampSpeedUp_: BigNumberish,
      dampSpeedDown_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRateModel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastAccumulatorAccrual"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastAverageUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastFloatingDebtUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [borrower: AddressLike, maxAssets: BigNumberish, seizeMarket: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFuturePools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMint"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRedeem"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdraw"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "penaltyRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "previewBorrow"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewDebt"
  ): TypedContractMethod<[borrower: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewFloatingAssetsAverage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewMint"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRefund"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRepay"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [borrowShares: BigNumberish, borrower: AddressLike],
    [[bigint, bigint] & { assets: bigint; actualShares: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [assets: BigNumberish, borrower: AddressLike],
    [[bigint, bigint] & { actualRepay: bigint; borrowShares: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayAtMaturity"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      maxAssets: BigNumberish,
      borrower: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayMaturityWithReturnValue"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      maxAssetsAllowed: BigNumberish,
      borrower: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "returnValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardsController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "seize"
  ): TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, assets: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetSymbol"
  ): TypedContractMethod<[assetSymbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBackupFeeRate"
  ): TypedContractMethod<[backupFeeRate_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDampSpeed"
  ): TypedContractMethod<
    [up: BigNumberish, down: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEarningsAccumulatorSmoothFactor"
  ): TypedContractMethod<
    [earningsAccumulatorSmoothFactor_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFreePenaltyRate"
  ): TypedContractMethod<[penaltyRate_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFrozen"
  ): TypedContractMethod<[isFrozen_: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestRateModel"
  ): TypedContractMethod<
    [interestRateModel_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxFuturePools"
  ): TypedContractMethod<[futurePools: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPenaltyRate"
  ): TypedContractMethod<[penaltyRate_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<[reserveFactor_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardsController"
  ): TypedContractMethod<
    [rewardsController_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<
    [treasury_: AddressLike, treasuryFeeRate_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFloatingBorrowAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFloatingBorrowShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, shares: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, shares: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasuryFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAtMaturity"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawMaturityWithReturnValue"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      minAssetsRequired: BigNumberish,
      receiver: AddressLike,
      owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccumulatorAccrual"
  ): TypedContractEvent<
    AccumulatorAccrualEvent.InputTuple,
    AccumulatorAccrualEvent.OutputTuple,
    AccumulatorAccrualEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BackupFeeRateSet"
  ): TypedContractEvent<
    BackupFeeRateSetEvent.InputTuple,
    BackupFeeRateSetEvent.OutputTuple,
    BackupFeeRateSetEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "BorrowAtMaturity"
  ): TypedContractEvent<
    BorrowAtMaturityEvent.InputTuple,
    BorrowAtMaturityEvent.OutputTuple,
    BorrowAtMaturityEvent.OutputObject
  >;
  getEvent(
    key: "DampSpeedSet"
  ): TypedContractEvent<
    DampSpeedSetEvent.InputTuple,
    DampSpeedSetEvent.OutputTuple,
    DampSpeedSetEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DepositAtMaturity"
  ): TypedContractEvent<
    DepositAtMaturityEvent.InputTuple,
    DepositAtMaturityEvent.OutputTuple,
    DepositAtMaturityEvent.OutputObject
  >;
  getEvent(
    key: "EarningsAccumulatorSmoothFactorSet"
  ): TypedContractEvent<
    EarningsAccumulatorSmoothFactorSetEvent.InputTuple,
    EarningsAccumulatorSmoothFactorSetEvent.OutputTuple,
    EarningsAccumulatorSmoothFactorSetEvent.OutputObject
  >;
  getEvent(
    key: "FixedEarningsUpdate"
  ): TypedContractEvent<
    FixedEarningsUpdateEvent.InputTuple,
    FixedEarningsUpdateEvent.OutputTuple,
    FixedEarningsUpdateEvent.OutputObject
  >;
  getEvent(
    key: "FloatingDebtUpdate"
  ): TypedContractEvent<
    FloatingDebtUpdateEvent.InputTuple,
    FloatingDebtUpdateEvent.OutputTuple,
    FloatingDebtUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Frozen"
  ): TypedContractEvent<
    FrozenEvent.InputTuple,
    FrozenEvent.OutputTuple,
    FrozenEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InterestRateModelSet"
  ): TypedContractEvent<
    InterestRateModelSetEvent.InputTuple,
    InterestRateModelSetEvent.OutputTuple,
    InterestRateModelSetEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "MarketUpdate"
  ): TypedContractEvent<
    MarketUpdateEvent.InputTuple,
    MarketUpdateEvent.OutputTuple,
    MarketUpdateEvent.OutputObject
  >;
  getEvent(
    key: "MaxFuturePoolsSet"
  ): TypedContractEvent<
    MaxFuturePoolsSetEvent.InputTuple,
    MaxFuturePoolsSetEvent.OutputTuple,
    MaxFuturePoolsSetEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PenaltyRateSet"
  ): TypedContractEvent<
    PenaltyRateSetEvent.InputTuple,
    PenaltyRateSetEvent.OutputTuple,
    PenaltyRateSetEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "RepayAtMaturity"
  ): TypedContractEvent<
    RepayAtMaturityEvent.InputTuple,
    RepayAtMaturityEvent.OutputTuple,
    RepayAtMaturityEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFactorSet"
  ): TypedContractEvent<
    ReserveFactorSetEvent.InputTuple,
    ReserveFactorSetEvent.OutputTuple,
    ReserveFactorSetEvent.OutputObject
  >;
  getEvent(
    key: "RewardsControllerSet"
  ): TypedContractEvent<
    RewardsControllerSetEvent.InputTuple,
    RewardsControllerSetEvent.OutputTuple,
    RewardsControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Seize"
  ): TypedContractEvent<
    SeizeEvent.InputTuple,
    SeizeEvent.OutputTuple,
    SeizeEvent.OutputObject
  >;
  getEvent(
    key: "SpreadBadDebt"
  ): TypedContractEvent<
    SpreadBadDebtEvent.InputTuple,
    SpreadBadDebtEvent.OutputTuple,
    SpreadBadDebtEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySet"
  ): TypedContractEvent<
    TreasurySetEvent.InputTuple,
    TreasurySetEvent.OutputTuple,
    TreasurySetEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawAtMaturity"
  ): TypedContractEvent<
    WithdrawAtMaturityEvent.InputTuple,
    WithdrawAtMaturityEvent.OutputTuple,
    WithdrawAtMaturityEvent.OutputObject
  >;

  filters: {
    "AccumulatorAccrual(uint256)": TypedContractEvent<
      AccumulatorAccrualEvent.InputTuple,
      AccumulatorAccrualEvent.OutputTuple,
      AccumulatorAccrualEvent.OutputObject
    >;
    AccumulatorAccrual: TypedContractEvent<
      AccumulatorAccrualEvent.InputTuple,
      AccumulatorAccrualEvent.OutputTuple,
      AccumulatorAccrualEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BackupFeeRateSet(uint256)": TypedContractEvent<
      BackupFeeRateSetEvent.InputTuple,
      BackupFeeRateSetEvent.OutputTuple,
      BackupFeeRateSetEvent.OutputObject
    >;
    BackupFeeRateSet: TypedContractEvent<
      BackupFeeRateSetEvent.InputTuple,
      BackupFeeRateSetEvent.OutputTuple,
      BackupFeeRateSetEvent.OutputObject
    >;

    "Borrow(address,address,address,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "BorrowAtMaturity(uint256,address,address,address,uint256,uint256)": TypedContractEvent<
      BorrowAtMaturityEvent.InputTuple,
      BorrowAtMaturityEvent.OutputTuple,
      BorrowAtMaturityEvent.OutputObject
    >;
    BorrowAtMaturity: TypedContractEvent<
      BorrowAtMaturityEvent.InputTuple,
      BorrowAtMaturityEvent.OutputTuple,
      BorrowAtMaturityEvent.OutputObject
    >;

    "DampSpeedSet(uint256,uint256)": TypedContractEvent<
      DampSpeedSetEvent.InputTuple,
      DampSpeedSetEvent.OutputTuple,
      DampSpeedSetEvent.OutputObject
    >;
    DampSpeedSet: TypedContractEvent<
      DampSpeedSetEvent.InputTuple,
      DampSpeedSetEvent.OutputTuple,
      DampSpeedSetEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DepositAtMaturity(uint256,address,address,uint256,uint256)": TypedContractEvent<
      DepositAtMaturityEvent.InputTuple,
      DepositAtMaturityEvent.OutputTuple,
      DepositAtMaturityEvent.OutputObject
    >;
    DepositAtMaturity: TypedContractEvent<
      DepositAtMaturityEvent.InputTuple,
      DepositAtMaturityEvent.OutputTuple,
      DepositAtMaturityEvent.OutputObject
    >;

    "EarningsAccumulatorSmoothFactorSet(uint256)": TypedContractEvent<
      EarningsAccumulatorSmoothFactorSetEvent.InputTuple,
      EarningsAccumulatorSmoothFactorSetEvent.OutputTuple,
      EarningsAccumulatorSmoothFactorSetEvent.OutputObject
    >;
    EarningsAccumulatorSmoothFactorSet: TypedContractEvent<
      EarningsAccumulatorSmoothFactorSetEvent.InputTuple,
      EarningsAccumulatorSmoothFactorSetEvent.OutputTuple,
      EarningsAccumulatorSmoothFactorSetEvent.OutputObject
    >;

    "FixedEarningsUpdate(uint256,uint256,uint256)": TypedContractEvent<
      FixedEarningsUpdateEvent.InputTuple,
      FixedEarningsUpdateEvent.OutputTuple,
      FixedEarningsUpdateEvent.OutputObject
    >;
    FixedEarningsUpdate: TypedContractEvent<
      FixedEarningsUpdateEvent.InputTuple,
      FixedEarningsUpdateEvent.OutputTuple,
      FixedEarningsUpdateEvent.OutputObject
    >;

    "FloatingDebtUpdate(uint256,uint256)": TypedContractEvent<
      FloatingDebtUpdateEvent.InputTuple,
      FloatingDebtUpdateEvent.OutputTuple,
      FloatingDebtUpdateEvent.OutputObject
    >;
    FloatingDebtUpdate: TypedContractEvent<
      FloatingDebtUpdateEvent.InputTuple,
      FloatingDebtUpdateEvent.OutputTuple,
      FloatingDebtUpdateEvent.OutputObject
    >;

    "Frozen(address,bool)": TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;
    Frozen: TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InterestRateModelSet(address)": TypedContractEvent<
      InterestRateModelSetEvent.InputTuple,
      InterestRateModelSetEvent.OutputTuple,
      InterestRateModelSetEvent.OutputObject
    >;
    InterestRateModelSet: TypedContractEvent<
      InterestRateModelSetEvent.InputTuple,
      InterestRateModelSetEvent.OutputTuple,
      InterestRateModelSetEvent.OutputObject
    >;

    "Liquidate(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "MarketUpdate(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MarketUpdateEvent.InputTuple,
      MarketUpdateEvent.OutputTuple,
      MarketUpdateEvent.OutputObject
    >;
    MarketUpdate: TypedContractEvent<
      MarketUpdateEvent.InputTuple,
      MarketUpdateEvent.OutputTuple,
      MarketUpdateEvent.OutputObject
    >;

    "MaxFuturePoolsSet(uint256)": TypedContractEvent<
      MaxFuturePoolsSetEvent.InputTuple,
      MaxFuturePoolsSetEvent.OutputTuple,
      MaxFuturePoolsSetEvent.OutputObject
    >;
    MaxFuturePoolsSet: TypedContractEvent<
      MaxFuturePoolsSetEvent.InputTuple,
      MaxFuturePoolsSetEvent.OutputTuple,
      MaxFuturePoolsSetEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PenaltyRateSet(uint256)": TypedContractEvent<
      PenaltyRateSetEvent.InputTuple,
      PenaltyRateSetEvent.OutputTuple,
      PenaltyRateSetEvent.OutputObject
    >;
    PenaltyRateSet: TypedContractEvent<
      PenaltyRateSetEvent.InputTuple,
      PenaltyRateSetEvent.OutputTuple,
      PenaltyRateSetEvent.OutputObject
    >;

    "Repay(address,address,uint256,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "RepayAtMaturity(uint256,address,address,uint256,uint256)": TypedContractEvent<
      RepayAtMaturityEvent.InputTuple,
      RepayAtMaturityEvent.OutputTuple,
      RepayAtMaturityEvent.OutputObject
    >;
    RepayAtMaturity: TypedContractEvent<
      RepayAtMaturityEvent.InputTuple,
      RepayAtMaturityEvent.OutputTuple,
      RepayAtMaturityEvent.OutputObject
    >;

    "ReserveFactorSet(uint256)": TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;
    ReserveFactorSet: TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;

    "RewardsControllerSet(address)": TypedContractEvent<
      RewardsControllerSetEvent.InputTuple,
      RewardsControllerSetEvent.OutputTuple,
      RewardsControllerSetEvent.OutputObject
    >;
    RewardsControllerSet: TypedContractEvent<
      RewardsControllerSetEvent.InputTuple,
      RewardsControllerSetEvent.OutputTuple,
      RewardsControllerSetEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Seize(address,address,uint256)": TypedContractEvent<
      SeizeEvent.InputTuple,
      SeizeEvent.OutputTuple,
      SeizeEvent.OutputObject
    >;
    Seize: TypedContractEvent<
      SeizeEvent.InputTuple,
      SeizeEvent.OutputTuple,
      SeizeEvent.OutputObject
    >;

    "SpreadBadDebt(address,uint256)": TypedContractEvent<
      SpreadBadDebtEvent.InputTuple,
      SpreadBadDebtEvent.OutputTuple,
      SpreadBadDebtEvent.OutputObject
    >;
    SpreadBadDebt: TypedContractEvent<
      SpreadBadDebtEvent.InputTuple,
      SpreadBadDebtEvent.OutputTuple,
      SpreadBadDebtEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TreasurySet(address,uint256)": TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
    TreasurySet: TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawAtMaturity(uint256,address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawAtMaturityEvent.InputTuple,
      WithdrawAtMaturityEvent.OutputTuple,
      WithdrawAtMaturityEvent.OutputObject
    >;
    WithdrawAtMaturity: TypedContractEvent<
      WithdrawAtMaturityEvent.InputTuple,
      WithdrawAtMaturityEvent.OutputTuple,
      WithdrawAtMaturityEvent.OutputObject
    >;
  };
}
