/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MarketETHRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrow"
      | "borrowAtMaturity"
      | "deposit"
      | "depositAtMaturity"
      | "initialize"
      | "market"
      | "redeem"
      | "refund"
      | "repay"
      | "repayAtMaturity"
      | "weth"
      | "withdraw"
      | "withdrawAtMaturity"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAtMaturity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositAtMaturity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "repayAtMaturity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAtMaturity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAtMaturity",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketETHRouter extends BaseContract {
  connect(runner?: ContractRunner | null): MarketETHRouter;
  waitForDeployment(): Promise<this>;

  interface: MarketETHRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrow: TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;

  borrowAtMaturity: TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      maxAssetsAllowed: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[], [bigint], "payable">;

  depositAtMaturity: TypedContractMethod<
    [maturity: BigNumberish, minAssetsRequired: BigNumberish],
    [bigint],
    "payable"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  market: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<[shares: BigNumberish], [bigint], "nonpayable">;

  refund: TypedContractMethod<
    [borrowShares: BigNumberish],
    [[bigint, bigint] & { repaidAssets: bigint; actualShares: bigint }],
    "payable"
  >;

  repay: TypedContractMethod<
    [assets: BigNumberish],
    [[bigint, bigint] & { repaidAssets: bigint; borrowShares: bigint }],
    "payable"
  >;

  repayAtMaturity: TypedContractMethod<
    [maturity: BigNumberish, assets: BigNumberish],
    [bigint],
    "payable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;

  withdrawAtMaturity: TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      minAssetsRequired: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowAtMaturity"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      maxAssetsAllowed: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [bigint], "payable">;
  getFunction(
    nameOrSignature: "depositAtMaturity"
  ): TypedContractMethod<
    [maturity: BigNumberish, minAssetsRequired: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [borrowShares: BigNumberish],
    [[bigint, bigint] & { repaidAssets: bigint; actualShares: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [assets: BigNumberish],
    [[bigint, bigint] & { repaidAssets: bigint; borrowShares: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "repayAtMaturity"
  ): TypedContractMethod<
    [maturity: BigNumberish, assets: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAtMaturity"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      assets: BigNumberish,
      minAssetsRequired: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
