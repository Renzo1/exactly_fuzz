/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPermit2 {
  export type TokenPermissionsStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type TokenPermissionsStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type PermitTransferFromStruct = {
    permitted: IPermit2.TokenPermissionsStruct;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitTransferFromStructOutput = [
    permitted: IPermit2.TokenPermissionsStructOutput,
    nonce: bigint,
    deadline: bigint
  ] & {
    permitted: IPermit2.TokenPermissionsStructOutput;
    nonce: bigint;
    deadline: bigint;
  };

  export type SignatureTransferDetailsStruct = {
    to: AddressLike;
    requestedAmount: BigNumberish;
  };

  export type SignatureTransferDetailsStructOutput = [
    to: string,
    requestedAmount: bigint
  ] & { to: string; requestedAmount: bigint };
}

export interface IPermit2Interface extends Interface {
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR" | "permitTransferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFrom",
    values: [
      IPermit2.PermitTransferFromStruct,
      IPermit2.SignatureTransferDetailsStruct,
      AddressLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFrom",
    data: BytesLike
  ): Result;
}

export interface IPermit2 extends BaseContract {
  connect(runner?: ContractRunner | null): IPermit2;
  waitForDeployment(): Promise<this>;

  interface: IPermit2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  permitTransferFrom: TypedContractMethod<
    [
      permit: IPermit2.PermitTransferFromStruct,
      transferDetails: IPermit2.SignatureTransferDetailsStruct,
      owner: AddressLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permitTransferFrom"
  ): TypedContractMethod<
    [
      permit: IPermit2.PermitTransferFromStruct,
      transferDetails: IPermit2.SignatureTransferDetailsStruct,
      owner: AddressLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
