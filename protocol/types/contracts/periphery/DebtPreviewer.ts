/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type AvailableAssetStruct = {
  asset: AddressLike;
  liquidity: BigNumberish;
};

export type AvailableAssetStructOutput = [asset: string, liquidity: bigint] & {
  asset: string;
  liquidity: bigint;
};

export type LeverageStruct = {
  ratio: BigNumberish;
  borrow: BigNumberish;
  deposit: BigNumberish;
  principal: BigNumberish;
  maxRatio: BigNumberish;
  minDeposit: BigNumberish;
  maxWithdraw: BigNumberish;
  availableAssets: AvailableAssetStruct[];
};

export type LeverageStructOutput = [
  ratio: bigint,
  borrow: bigint,
  deposit: bigint,
  principal: bigint,
  maxRatio: bigint,
  minDeposit: bigint,
  maxWithdraw: bigint,
  availableAssets: AvailableAssetStructOutput[]
] & {
  ratio: bigint;
  borrow: bigint;
  deposit: bigint;
  principal: bigint;
  maxRatio: bigint;
  minDeposit: bigint;
  maxWithdraw: bigint;
  availableAssets: AvailableAssetStructOutput[];
};

export type RewardRateStruct = {
  asset: AddressLike;
  assetName: string;
  assetSymbol: string;
  borrow: BigNumberish;
  deposit: BigNumberish;
};

export type RewardRateStructOutput = [
  asset: string,
  assetName: string,
  assetSymbol: string,
  borrow: bigint,
  deposit: bigint
] & {
  asset: string;
  assetName: string;
  assetSymbol: string;
  borrow: bigint;
  deposit: bigint;
};

export type RatesStruct = {
  native: BigNumberish;
  borrow: BigNumberish;
  deposit: BigNumberish;
  rewards: RewardRateStruct[];
};

export type RatesStructOutput = [
  native: bigint,
  borrow: bigint,
  deposit: bigint,
  rewards: RewardRateStructOutput[]
] & {
  native: bigint;
  borrow: bigint;
  deposit: bigint;
  rewards: RewardRateStructOutput[];
};

export type LimitStruct = {
  ratio: BigNumberish;
  borrow: BigNumberish;
  deposit: BigNumberish;
  principal: BigNumberish;
  maxRatio: BigNumberish;
  maxWithdraw: BigNumberish;
};

export type LimitStructOutput = [
  ratio: bigint,
  borrow: bigint,
  deposit: bigint,
  principal: bigint,
  maxRatio: bigint,
  maxWithdraw: bigint
] & {
  ratio: bigint;
  borrow: bigint;
  deposit: bigint;
  principal: bigint;
  maxRatio: bigint;
  maxWithdraw: bigint;
};

export interface DebtPreviewerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "debtManager"
      | "leverage"
      | "leverageRates"
      | "previewDeleverage"
      | "previewLeverage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "debtManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverage",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leverageRates",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeleverage",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewLeverage",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "debtManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leverageRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeleverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewLeverage",
    data: BytesLike
  ): Result;
}

export interface DebtPreviewer extends BaseContract {
  connect(runner?: ContractRunner | null): DebtPreviewer;
  waitForDeployment(): Promise<this>;

  interface: DebtPreviewerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  debtManager: TypedContractMethod<[], [string], "view">;

  leverage: TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      minHealthFactor: BigNumberish
    ],
    [LeverageStructOutput],
    "view"
  >;

  leverageRates: TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      assets: BigNumberish,
      targetRatio: BigNumberish,
      depositRate: BigNumberish,
      nativeRate: BigNumberish,
      nativeRateBorrow: BigNumberish
    ],
    [RatesStructOutput],
    "view"
  >;

  previewDeleverage: TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      withdraw: BigNumberish,
      ratio: BigNumberish,
      minHealthFactor: BigNumberish
    ],
    [LimitStructOutput],
    "view"
  >;

  previewLeverage: TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      deposit: BigNumberish,
      ratio: BigNumberish,
      minHealthFactor: BigNumberish
    ],
    [LimitStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "debtManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "leverage"
  ): TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      minHealthFactor: BigNumberish
    ],
    [LeverageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "leverageRates"
  ): TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      assets: BigNumberish,
      targetRatio: BigNumberish,
      depositRate: BigNumberish,
      nativeRate: BigNumberish,
      nativeRateBorrow: BigNumberish
    ],
    [RatesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewDeleverage"
  ): TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      withdraw: BigNumberish,
      ratio: BigNumberish,
      minHealthFactor: BigNumberish
    ],
    [LimitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewLeverage"
  ): TypedContractMethod<
    [
      marketDeposit: AddressLike,
      marketBorrow: AddressLike,
      account: AddressLike,
      deposit: BigNumberish,
      ratio: BigNumberish,
      minHealthFactor: BigNumberish
    ],
    [LimitStructOutput],
    "view"
  >;

  filters: {};
}
