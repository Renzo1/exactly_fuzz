{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:51",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:57"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)23_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol:IVotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC5805Upgradeable.sol:IERC5805Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC5805Upgradeable.sol:9",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol:IVotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC6372Upgradeable.sol:IERC6372Upgradeable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC6372Upgradeable.sol:IERC6372Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC6372Upgradeable.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39",
        "version": {
          "withMetadata": "18a980e584897d0752930a6d6155a131e83d166f307c16e0d0b0060e9a7b9c96",
          "withoutMetadata": "a68977d2e1cc0442fb48606ac83da880e3212bf866b7c68d756161cdd3bd6b7f",
          "linkedWithoutMetadata": "a68977d2e1cc0442fb48606ac83da880e3212bf866b7c68d756161cdd3bd6b7f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "103",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "104",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)3295_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)3295_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3295_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5805Upgradeable.sol:IERC5805Upgradeable",
          "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol:IVotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC6372Upgradeable.sol:IERC6372Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:SafeCastUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()",
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "103",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "104",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)3295_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:37"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1737_storage)dyn_storage)",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:38"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_struct(Checkpoint)1737_storage)dyn_storage",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:39"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "207",
              "type": "t_array(t_uint256)47_storage",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:302"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)1737_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]",
              "numberOfBytes": "1504"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1737_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)3295_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1737_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3295_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "36d2641799916a9ae79ab94091fc55948566a288189b90a2b2955a7372e3fdca",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "442ba79546bc0a050e89d7dfc94d051bc3fb86bb2aeba7d17ee3929be9a80d1f",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "25bb960b64857687df65253741103fff2f5e5794e8b5feb15f2e22ed92289f2d",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:12",
        "version": {
          "withMetadata": "587635574021f954aa31df3d8b4ab5c6adeb0e1249541c67be5cf1c1042467ca",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "02b5839ee1e76f990da1c4f9e5f251452e4ac122a028202918042685cdaaeee3",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            }
          ],
          "types": {
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "260f6092e6e1de7cda091b9270bb0414c319be898f49f3262b4aed31c5c51fba",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:22",
        "version": {
          "withMetadata": "ec1b2ea9ffb773d6e9653a3574051da518a1c7b455944aefb49f4691ea84aa50",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:SignedMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol:9",
        "version": {
          "withMetadata": "dd6ddd2086b06ab62faa8abf64b8ab668eb08566cc3fe342298bd751cbd16ab7",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)6832_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)6832_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)6832_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:25",
        "version": {
          "withMetadata": "d1463c85d9cdf0881b12a0a41a98e14da20e2cae9b04d196710190edcf1cd44a",
          "withoutMetadata": "d1463c85d9cdf0881b12a0a41a98e14da20e2cae9b04d196710190edcf1cd44a",
          "linkedWithoutMetadata": "d1463c85d9cdf0881b12a0a41a98e14da20e2cae9b04d196710190edcf1cd44a"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[],address)",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)6832_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:32"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)6832_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)6832_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "7d0f772ab055c6fe603648cd07663d3fe701b2474eb34f0fdf9ce8e344746058",
          "withoutMetadata": "7d0f772ab055c6fe603648cd07663d3fe701b2474eb34f0fdf9ce8e344746058",
          "linkedWithoutMetadata": "7d0f772ab055c6fe603648cd07663d3fe701b2474eb34f0fdf9ce8e344746058"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "37bab5fb8d903f7c8bdb262cd83496493b1c2a5b6eeaddc4f43435e15001ac84",
          "withoutMetadata": "9a90845036baa45c7ee39747eed1bc3eaf0ca1b05051be7c78eca320cf7444ce",
          "linkedWithoutMetadata": "9a90845036baa45c7ee39747eed1bc3eaf0ca1b05051be7c78eca320cf7444ce"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "699c157a7d40d02051af7b72bba283ee832add716432840f3519991f851c71ca",
          "withoutMetadata": "699c157a7d40d02051af7b72bba283ee832add716432840f3519991f851c71ca",
          "linkedWithoutMetadata": "699c157a7d40d02051af7b72bba283ee832add716432840f3519991f851c71ca"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "338dd542bc49d635e58df640bea44d0d91dfbdf4fa359f41f7b28d159411b057",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "ea2e26fb968117f8679de38bb84bf0495f1cc63e0c8add5654e2d725a8585293",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "b954dd318c2434985d3676649114e4cbd0274d2887679280fa3549a2d694ea37",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f5a41c7c57eff990e827cdf13563197afee293c36c08f78f80737dde75662916",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:22",
        "version": {
          "withMetadata": "30e10492c867d92c1bbff1bc74467279d7cf597c4a1dc39a725d80f625f94a97",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "1628beb0d4408f9c5918232e2aeb3ea05552c894f887128275c8f8b619822271",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/Auditor.sol:Auditor": {
        "src": "contracts/Auditor.sol:11",
        "version": {
          "withMetadata": "a5f76d018a76b1aca1283a87058c9923c4f1218e6f5f8bc7d00e65c371453bfc",
          "withoutMetadata": "014e5469a4d7da5894c9bb8ba5b036492340349c4769100e4c3566d56d38d96f",
          "linkedWithoutMetadata": "014e5469a4d7da5894c9bb8ba5b036492340349c4769100e4c3566d56d38d96f"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [
          "(uint256)",
          "initialize((uint128,uint128))",
          "enterMarket(address)",
          "exitMarket(address)",
          "accountLiquidity(address,address,uint256)",
          "checkBorrow(address,address)",
          "checkShortfall(address,address,uint256)",
          "checkLiquidation(address,address,address,uint256)",
          "checkSeize(address,address)",
          "calculateSeize(address,address,address,uint256)",
          "handleBadDebt(address)",
          "assetPrice(address)",
          "allMarkets()",
          "enableMarket(address,address,uint128)",
          "setAdjustFactor(address,uint128)",
          "setPriceFeed(address,address)",
          "setLiquidationIncentive((uint128,uint128))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:57"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "accountMarkets",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Auditor",
              "src": "contracts/Auditor.sol:33"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_contract(Market)19125,t_struct(MarketData)13895_storage)",
              "contract": "Auditor",
              "src": "contracts/Auditor.sol:35"
            },
            {
              "label": "marketList",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_contract(Market)19125)dyn_storage",
              "contract": "Auditor",
              "src": "contracts/Auditor.sol:37"
            },
            {
              "label": "liquidationIncentive",
              "offset": 0,
              "slot": "154",
              "type": "t_struct(LiquidationIncentive)13901_storage",
              "contract": "Auditor",
              "src": "contracts/Auditor.sol:40"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(Market)19125)dyn_storage": {
              "label": "contract Market[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IPriceFeed)35090": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(Market)19125": {
              "label": "contract Market",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(Market)19125,t_struct(MarketData)13895_storage)": {
              "label": "mapping(contract Market => struct Auditor.MarketData)",
              "numberOfBytes": "32"
            },
            "t_struct(LiquidationIncentive)13901_storage": {
              "label": "struct Auditor.LiquidationIncentive",
              "members": [
                {
                  "label": "liquidator",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lenders",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(MarketData)13895_storage": {
              "label": "struct Auditor.MarketData",
              "members": [
                {
                  "label": "adjustFactor",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "decimals",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "index",
                  "type": "t_uint8",
                  "offset": 17,
                  "slot": "0"
                },
                {
                  "label": "isListed",
                  "type": "t_bool",
                  "offset": 18,
                  "slot": "0"
                },
                {
                  "label": "priceFeed",
                  "type": "t_contract(IPriceFeed)35090",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)23_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/InterestRateModel.sol:InterestRateModel": {
        "src": "contracts/InterestRateModel.sol:10",
        "version": {
          "withMetadata": "21757f89fa7827ffbc86353c01220a8840f28474cdcf6f6ea3bb858ae265681e",
          "withoutMetadata": "769483488a63dc37cd075f119adb8a92c74d564544428577419c04dcbb5fd277",
          "linkedWithoutMetadata": "769483488a63dc37cd075f119adb8a92c74d564544428577419c04dcbb5fd277"
        },
        "inherit": [],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "contracts/utils/FixedLib.sol:FixedLib"
        ],
        "methods": [
          "((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,uint256,uint256),address)",
          "fixedRate(uint256,uint256,uint256,uint256,uint256)",
          "floatingRate(uint256,uint256)",
          "parameters()",
          "floatingRate(uint256)",
          "fixedBorrowRate(uint256,uint256,uint256,uint256,uint256)",
          "minFixedRate(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InterestRateModel",
            "src": "contracts/InterestRateModel.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "floatingCurveA",
            "src": "contracts/InterestRateModel.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "floatingCurveB",
            "src": "contracts/InterestRateModel.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "floatingMaxUtilization",
            "src": "contracts/InterestRateModel.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "naturalUtilization",
            "src": "contracts/InterestRateModel.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "growthSpeed",
            "src": "contracts/InterestRateModel.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "sigmoidSpeed",
            "src": "contracts/InterestRateModel.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "spreadFactor",
            "src": "contracts/InterestRateModel.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "maturitySpeed",
            "src": "contracts/InterestRateModel.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "timePreference",
            "src": "contracts/InterestRateModel.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "fixedAllocation",
            "src": "contracts/InterestRateModel.sol:36"
          },
          {
            "kind": "state-variable-immutable",
            "name": "maxRate",
            "src": "contracts/InterestRateModel.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "auxSigmoid",
            "src": "contracts/InterestRateModel.sol:43"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/InterestRateModel.sol:180"
          },
          {
            "kind": "state-variable-immutable",
            "name": "fixedCurveA",
            "src": "contracts/InterestRateModel.sol:181"
          },
          {
            "kind": "state-variable-immutable",
            "name": "fixedCurveB",
            "src": "contracts/InterestRateModel.sol:182"
          },
          {
            "kind": "state-variable-immutable",
            "name": "fixedMaxUtilization",
            "src": "contracts/InterestRateModel.sol:183"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_parameters",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Parameters)15089_storage",
              "contract": "InterestRateModel",
              "src": "contracts/InterestRateModel.sol:46"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_struct(Parameters)15089_storage": {
              "label": "struct Parameters",
              "members": [
                {
                  "label": "minRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "naturalRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maxUtilization",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "naturalUtilization",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "growthSpeed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "sigmoidSpeed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "spreadFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "maturitySpeed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "timePreference",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "fixedAllocation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "maxRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/Market.sol:Market": {
        "src": "contracts/Market.sol:15",
        "version": {
          "withMetadata": "fdca4c6ef54ee2f7b9f6a45e0a0c5791243374e8dd9e12cc312cdf558231031b",
          "withoutMetadata": "c107b130ee010930d09cd4e2c9333b0318aefb2c2674c9b700e2e525b1d3226f",
          "linkedWithoutMetadata": "c107b130ee010930d09cd4e2c9333b0318aefb2c2674c9b700e2e525b1d3226f"
        },
        "inherit": [
          "solmate/src/mixins/ERC4626.sol:ERC4626",
          "solmate/src/tokens/ERC20.sol:ERC20",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib",
          "contracts/utils/FixedLib.sol:FixedLib",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [
          "(address,address)",
          "initialize(string,uint8,uint128,address,uint256,uint256,uint128,uint256,uint256)",
          "borrow(uint256,address,address)",
          "repay(uint256,address)",
          "refund(uint256,address)",
          "depositAtMaturity(uint256,uint256,uint256,address)",
          "borrowAtMaturity(uint256,uint256,uint256,address,address)",
          "withdrawAtMaturity(uint256,uint256,uint256,address,address)",
          "repayAtMaturity(uint256,uint256,uint256,address)",
          "liquidate(address,uint256,address)",
          "clearBadDebt(address)",
          "seize(address,address,uint256)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "accountSnapshot(address)",
          "previewDebt(address)",
          "previewFloatingAssetsAverage()",
          "totalFloatingBorrowAssets()",
          "totalAssets()",
          "previewBorrow(uint256)",
          "previewRepay(uint256)",
          "previewRefund(uint256)",
          "fixedPoolBorrowed(uint256)",
          "fixedPoolBalance(uint256)",
          "setAssetSymbol(string)",
          "setBackupFeeRate(uint256)",
          "setDampSpeed(uint256,uint256)",
          "setEarningsAccumulatorSmoothFactor(uint128)",
          "setInterestRateModel(address)",
          "setRewardsController(address)",
          "setMaxFuturePools(uint8)",
          "setPenaltyRate(uint256)",
          "setReserveFactor(uint128)",
          "setTreasury(address,uint256)",
          "pause()",
          "unpause()",
          "setFrozen(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:57"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "201",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "202",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "fixedDepositPositions",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)35054_storage))",
              "contract": "Market",
              "src": "contracts/Market.sol:31"
            },
            {
              "label": "fixedBorrowPositions",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)35054_storage))",
              "contract": "Market",
              "src": "contracts/Market.sol:33"
            },
            {
              "label": "fixedPools",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_uint256,t_struct(Pool)35048_storage)",
              "contract": "Market",
              "src": "contracts/Market.sol:35"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "210",
              "type": "t_mapping(t_address,t_struct(Account)19124_storage)",
              "contract": "Market",
              "src": "contracts/Market.sol:38"
            },
            {
              "label": "floatingBackupBorrowed",
              "offset": 0,
              "slot": "211",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:41"
            },
            {
              "label": "floatingDebt",
              "offset": 0,
              "slot": "212",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:43"
            },
            {
              "label": "earningsAccumulator",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:46"
            },
            {
              "label": "penaltyRate",
              "offset": 0,
              "slot": "214",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:48"
            },
            {
              "label": "backupFeeRate",
              "offset": 0,
              "slot": "215",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:50"
            },
            {
              "label": "dampSpeedUp",
              "offset": 0,
              "slot": "216",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:52"
            },
            {
              "label": "dampSpeedDown",
              "offset": 0,
              "slot": "217",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:54"
            },
            {
              "label": "maxFuturePools",
              "offset": 0,
              "slot": "218",
              "type": "t_uint8",
              "contract": "Market",
              "src": "contracts/Market.sol:57"
            },
            {
              "label": "lastAccumulatorAccrual",
              "offset": 1,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:59"
            },
            {
              "label": "lastFloatingDebtUpdate",
              "offset": 5,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:61"
            },
            {
              "label": "lastAverageUpdate",
              "offset": 9,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:63"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "219",
              "type": "t_contract(InterestRateModel)15062",
              "contract": "Market",
              "src": "contracts/Market.sol:66"
            },
            {
              "label": "earningsAccumulatorSmoothFactor",
              "offset": 0,
              "slot": "220",
              "type": "t_uint128",
              "contract": "Market",
              "src": "contracts/Market.sol:69"
            },
            {
              "label": "reserveFactor",
              "offset": 16,
              "slot": "220",
              "type": "t_uint128",
              "contract": "Market",
              "src": "contracts/Market.sol:71"
            },
            {
              "label": "floatingAssets",
              "offset": 0,
              "slot": "221",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:74"
            },
            {
              "label": "floatingAssetsAverage",
              "offset": 0,
              "slot": "222",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:76"
            },
            {
              "label": "totalFloatingBorrowShares",
              "offset": 0,
              "slot": "223",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:79"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "224",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:83",
              "renamedFrom": "floatingUtilization"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "225",
              "type": "t_address",
              "contract": "Market",
              "src": "contracts/Market.sol:86"
            },
            {
              "label": "treasuryFeeRate",
              "offset": 0,
              "slot": "226",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:88"
            },
            {
              "label": "rewardsController",
              "offset": 0,
              "slot": "227",
              "type": "t_contract(RewardsController)23082",
              "contract": "Market",
              "src": "contracts/Market.sol:91"
            },
            {
              "label": "isFrozen",
              "offset": 20,
              "slot": "227",
              "type": "t_bool",
              "contract": "Market",
              "src": "contracts/Market.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(InterestRateModel)15062": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_contract(RewardsController)23082": {
              "label": "contract RewardsController",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)19124_storage)": {
              "label": "mapping(address => struct Market.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Position)35054_storage)": {
              "label": "mapping(address => struct FixedLib.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)35054_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FixedLib.Position))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)35048_storage)": {
              "label": "mapping(uint256 => struct FixedLib.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Account)19124_storage": {
              "label": "struct Market.Account",
              "members": [
                {
                  "label": "fixedDeposits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fixedBorrows",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "floatingBorrowShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Pool)35048_storage": {
              "label": "struct FixedLib.Pool",
              "members": [
                {
                  "label": "borrowed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "supplied",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unassignedEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastAccrual",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Position)35054_storage": {
              "label": "struct FixedLib.Position",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)23_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/MarketETHRouter.sol:MarketETHRouter": {
        "src": "contracts/MarketETHRouter.sol:9",
        "version": {
          "withMetadata": "93b878f87355a0114e9f5931c77cdb85167dc9ed0d4b7c48579a0ce953c36a94",
          "withoutMetadata": "ca545112c33ad4ab7be171fd1ab3cc605a81ec0651330ddd446de9ef63fbc9f5",
          "linkedWithoutMetadata": "ca545112c33ad4ab7be171fd1ab3cc605a81ec0651330ddd446de9ef63fbc9f5"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address)",
          "initialize()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "redeem(uint256)",
          "borrow(uint256)",
          "repay(uint256)",
          "refund(uint256)",
          "depositAtMaturity(uint256,uint256)",
          "withdrawAtMaturity(uint256,uint256,uint256)",
          "borrowAtMaturity(uint256,uint256,uint256)",
          "repayAtMaturity(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/PriceFeedDouble.sol:PriceFeedDouble": {
        "src": "contracts/PriceFeedDouble.sol:7",
        "version": {
          "withMetadata": "01938cb5130d2892ed1be8c6ec9fe64e283878a01faa19d59290dcfed6c51e04",
          "withoutMetadata": "8a1fd4b8302c52510f832f08e3e5a4329e57f8485927955da94c49612ba2c5e4",
          "linkedWithoutMetadata": "8a1fd4b8302c52510f832f08e3e5a4329e57f8485927955da94c49612ba2c5e4"
        },
        "inherit": [
          "contracts/utils/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib"
        ],
        "methods": [
          "(address,address)",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeedDouble",
            "src": "contracts/PriceFeedDouble.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "priceFeedOne",
            "src": "contracts/PriceFeedDouble.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "contracts/PriceFeedDouble.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "priceFeedTwo",
            "src": "contracts/PriceFeedDouble.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "baseUnit",
            "src": "contracts/PriceFeedDouble.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/PriceFeedPool.sol:IPool": {
        "src": "contracts/PriceFeedPool.sol:47",
        "inherit": [],
        "libraries": [],
        "methods": [
          "token0()",
          "token1()",
          "getReserves()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/PriceFeedPool.sol:PriceFeedPool": {
        "src": "contracts/PriceFeedPool.sol:8",
        "version": {
          "withMetadata": "24db34ae0f668a614fe3e136a7a64ffc7a3a9cd185fed7318245426cfbbe6a2f",
          "withoutMetadata": "4ce47891e8a5aabf2dff658c2d700043424ceed1fb7343692ffc1e129e515764",
          "linkedWithoutMetadata": "4ce47891e8a5aabf2dff658c2d700043424ceed1fb7343692ffc1e129e515764"
        },
        "inherit": [
          "contracts/utils/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib"
        ],
        "methods": [
          "(address,address,bool)",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeedPool",
            "src": "contracts/PriceFeedPool.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "basePriceFeed",
            "src": "contracts/PriceFeedPool.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "baseUnit0",
            "src": "contracts/PriceFeedPool.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "baseUnit1",
            "src": "contracts/PriceFeedPool.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "contracts/PriceFeedPool.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token1Based",
            "src": "contracts/PriceFeedPool.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pool",
            "src": "contracts/PriceFeedPool.sol:22"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/PriceFeedWrapper.sol:PriceFeedWrapper": {
        "src": "contracts/PriceFeedWrapper.sol:7",
        "version": {
          "withMetadata": "1521cdf854e93633e8a7c7ba96797427a08b9313b064e0d57429fa0b633a20ce",
          "withoutMetadata": "9d206446966ea291c810a561d4fe7c94aa876907476c884cd8b39cdc4a9ea229",
          "linkedWithoutMetadata": "9d206446966ea291c810a561d4fe7c94aa876907476c884cd8b39cdc4a9ea229"
        },
        "inherit": [
          "contracts/utils/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib"
        ],
        "methods": [
          "(address,address,bytes4,uint256)",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PriceFeedWrapper",
            "src": "contracts/PriceFeedWrapper.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "mainPriceFeed",
            "src": "contracts/PriceFeedWrapper.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "contracts/PriceFeedWrapper.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "wrapper",
            "src": "contracts/PriceFeedWrapper.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "conversionSelector",
            "src": "contracts/PriceFeedWrapper.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "baseUnit",
            "src": "contracts/PriceFeedWrapper.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/RewardsController.sol:RewardsController": {
        "src": "contracts/RewardsController.sol:14",
        "version": {
          "withMetadata": "987a6e978d99f4a276a3d13c48490911f30775c1fdd988e3bbd4946dd3250af0",
          "withoutMetadata": "4ebc4ea91d9d8875219f30c24753610f5bc9158714fe1c0198bd4726870d0029",
          "linkedWithoutMetadata": "4ebc4ea91d9d8875219f30c24753610f5bc9158714fe1c0198bd4726870d0029"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib",
          "contracts/utils/FixedLib.sol:FixedLib",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [
          "()",
          "initialize()",
          "handleDeposit(address)",
          "handleBorrow(address)",
          "claimAll(address)",
          "claim(struct RewardsController.MarketOperation[],address,contract ERC20[])",
          "claim(struct RewardsController.MarketOperation[],(address,contract ERC20[],uint256,uint8,bytes32,bytes32))",
          "rewardConfig(address,address)",
          "availableRewardsCount(address)",
          "accountOperation(address,address,bool,address)",
          "distributionTime(address,address)",
          "allRewards()",
          "allMarketsOperations()",
          "allClaimable(address,address)",
          "claimable(struct RewardsController.MarketOperation[],address,address)",
          "rewardIndexes(address,address)",
          "previewAllocation(address,address,uint256)",
          "withdraw(address,address)",
          "config(struct RewardsController.Config[])",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:57"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "distribution",
              "offset": 0,
              "slot": "151",
              "type": "t_mapping(t_contract(Market)19125,t_struct(Distribution)23021_storage)",
              "contract": "RewardsController",
              "src": "contracts/RewardsController.sol:23"
            },
            {
              "label": "rewardEnabled",
              "offset": 0,
              "slot": "152",
              "type": "t_mapping(t_contract(ERC20)36055,t_bool)",
              "contract": "RewardsController",
              "src": "contracts/RewardsController.sol:25"
            },
            {
              "label": "rewardList",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_contract(ERC20)36055)dyn_storage",
              "contract": "RewardsController",
              "src": "contracts/RewardsController.sol:27"
            },
            {
              "label": "marketList",
              "offset": 0,
              "slot": "154",
              "type": "t_array(t_contract(Market)19125)dyn_storage",
              "contract": "RewardsController",
              "src": "contracts/RewardsController.sol:29"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "155",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "RewardsController",
              "src": "contracts/RewardsController.sol:720"
            },
            {
              "label": "_claimSender",
              "offset": 0,
              "slot": "156",
              "type": "t_address",
              "contract": "RewardsController",
              "src": "contracts/RewardsController.sol:736"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(ERC20)36055)dyn_storage": {
              "label": "contract ERC20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_contract(Market)19125)dyn_storage": {
              "label": "contract Market[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ERC20)36055": {
              "label": "contract ERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IPriceFeed)35090": {
              "label": "contract IPriceFeed",
              "numberOfBytes": "20"
            },
            "t_contract(Market)19125": {
              "label": "contract Market",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bool,t_struct(Account)22926_storage))": {
              "label": "mapping(address => mapping(bool => struct RewardsController.Account))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bool,t_struct(Account)22926_storage)": {
              "label": "mapping(bool => struct RewardsController.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC20)36055,t_bool)": {
              "label": "mapping(contract ERC20 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(ERC20)36055,t_struct(RewardData)23005_storage)": {
              "label": "mapping(contract ERC20 => struct RewardsController.RewardData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(Market)19125,t_struct(Distribution)23021_storage)": {
              "label": "mapping(contract Market => struct RewardsController.Distribution)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint128,t_contract(ERC20)36055)": {
              "label": "mapping(uint128 => contract ERC20)",
              "numberOfBytes": "32"
            },
            "t_struct(Account)22926_storage": {
              "label": "struct RewardsController.Account",
              "members": [
                {
                  "label": "index",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accrued",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Distribution)23021_storage": {
              "label": "struct RewardsController.Distribution",
              "members": [
                {
                  "label": "rewards",
                  "type": "t_mapping(t_contract(ERC20)36055,t_struct(RewardData)23005_storage)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "availableRewards",
                  "type": "t_mapping(t_uint128,t_contract(ERC20)36055)",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "availableRewardsCount",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "baseUnit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(RewardData)23005_storage": {
              "label": "struct RewardsController.RewardData",
              "members": [
                {
                  "label": "targetDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "releaseRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalDistribution",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "undistributedFactor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastUndistributed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "flipSpeed",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "compensationFactor",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "5"
                },
                {
                  "label": "transitionFactor",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "5"
                },
                {
                  "label": "borrowAllocationWeightFactor",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "depositAllocationWeightAddend",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "6"
                },
                {
                  "label": "depositAllocationWeightFactor",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "6"
                },
                {
                  "label": "borrowIndex",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "depositIndex",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "7"
                },
                {
                  "label": "start",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "end",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "8"
                },
                {
                  "label": "lastUpdate",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "8"
                },
                {
                  "label": "lastConfig",
                  "type": "t_uint32",
                  "offset": 12,
                  "slot": "8"
                },
                {
                  "label": "lastConfigReleased",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "priceFeed",
                  "type": "t_contract(IPriceFeed)35090",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "accounts",
                  "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Account)22926_storage))",
                  "offset": 0,
                  "slot": "11"
                }
              ],
              "numberOfBytes": "384"
            },
            "t_struct(RoleData)23_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/FixedPoolHarness.sol:FixedPoolHarness": {
        "src": "contracts/mocks/FixedPoolHarness.sol:6",
        "version": {
          "withMetadata": "10a9737113a64a9851fdfdb12b3daef18c767603743881c7e14ed3e5db0f82c2",
          "withoutMetadata": "98e3fbf3322c04c72d2bcecde10ca7af490d29438e9019dcf43417b155906e1c",
          "linkedWithoutMetadata": "98e3fbf3322c04c72d2bcecde10ca7af490d29438e9019dcf43417b155906e1c"
        },
        "inherit": [],
        "libraries": [
          "contracts/utils/FixedLib.sol:FixedLib"
        ],
        "methods": [
          "calculateDeposit(uint256,uint256,uint256,uint256,uint256,uint256)",
          "accrueEarnings(uint256)",
          "deposit(uint256)",
          "repay(uint256)",
          "borrow(uint256)",
          "distributeEarnings(uint256,uint256,uint256,uint256,uint256,uint256)",
          "withdraw(uint256)",
          "setMaturity(uint256,uint256)",
          "clearMaturity(uint256,uint256)",
          "addFee(uint256)",
          "removeFee(uint256)",
          "scaleProportionally(uint256,uint256,uint256)",
          "reduceProportionally(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "fixedPool",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Pool)35048_storage",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:11"
            },
            {
              "label": "backupDebtAddition",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:12"
            },
            {
              "label": "newAccountBorrows",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:13"
            },
            {
              "label": "backupDebtReduction",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:14"
            },
            {
              "label": "nextTimestamp",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:15"
            },
            {
              "label": "lastBackupEarnings",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:16"
            },
            {
              "label": "lastEarningsTreasury",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:17"
            },
            {
              "label": "scaledDebt",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Position)35054_storage",
              "contract": "FixedPoolHarness",
              "src": "contracts/mocks/FixedPoolHarness.sol:18"
            }
          ],
          "types": {
            "t_struct(Pool)35048_storage": {
              "label": "struct FixedLib.Pool",
              "members": [
                {
                  "label": "borrowed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "supplied",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unassignedEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastAccrual",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Position)35054_storage": {
              "label": "struct FixedLib.Position",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MarketHarness.sol:MarketHarness": {
        "src": "contracts/mocks/MarketHarness.sol:6",
        "version": {
          "withMetadata": "85cae931ffa75df3e0af675a623b009c5d6527b3fef5d4fd399e35dda564cd7f",
          "withoutMetadata": "4178786a4ccc4de42e84d56c06c90e4c254490a5e72c7eb7278b54c958784ceb",
          "linkedWithoutMetadata": "4178786a4ccc4de42e84d56c06c90e4c254490a5e72c7eb7278b54c958784ceb"
        },
        "inherit": [
          "contracts/Market.sol:Market",
          "solmate/src/mixins/ERC4626.sol:ERC4626",
          "solmate/src/tokens/ERC20.sol:ERC20",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "(address,uint8,uint128,address,address,uint256,uint256,uint128,uint256,uint256)",
          "borrowMaturityWithReturnValue(uint256,uint256,uint256,address,address)",
          "depositMaturityWithReturnValue(uint256,uint256,uint256,address)",
          "withdrawMaturityWithReturnValue(uint256,uint256,uint256,address,address)",
          "repayMaturityWithReturnValue(uint256,uint256,uint256,address)",
          "setFreePenaltyRate(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MarketHarness",
            "src": "contracts/mocks/MarketHarness.sol:9"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/mocks/MarketHarness.sol:43"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/mocks/MarketHarness.sol:56"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/mocks/MarketHarness.sol:70"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/mocks/MarketHarness.sol:83"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:57"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "151",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "name",
              "offset": 0,
              "slot": "201",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "202",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "203",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "206",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "fixedDepositPositions",
              "offset": 0,
              "slot": "207",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)35054_storage))",
              "contract": "Market",
              "src": "contracts/Market.sol:31"
            },
            {
              "label": "fixedBorrowPositions",
              "offset": 0,
              "slot": "208",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)35054_storage))",
              "contract": "Market",
              "src": "contracts/Market.sol:33"
            },
            {
              "label": "fixedPools",
              "offset": 0,
              "slot": "209",
              "type": "t_mapping(t_uint256,t_struct(Pool)35048_storage)",
              "contract": "Market",
              "src": "contracts/Market.sol:35"
            },
            {
              "label": "accounts",
              "offset": 0,
              "slot": "210",
              "type": "t_mapping(t_address,t_struct(Account)19124_storage)",
              "contract": "Market",
              "src": "contracts/Market.sol:38"
            },
            {
              "label": "floatingBackupBorrowed",
              "offset": 0,
              "slot": "211",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:41"
            },
            {
              "label": "floatingDebt",
              "offset": 0,
              "slot": "212",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:43"
            },
            {
              "label": "earningsAccumulator",
              "offset": 0,
              "slot": "213",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:46"
            },
            {
              "label": "penaltyRate",
              "offset": 0,
              "slot": "214",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:48"
            },
            {
              "label": "backupFeeRate",
              "offset": 0,
              "slot": "215",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:50"
            },
            {
              "label": "dampSpeedUp",
              "offset": 0,
              "slot": "216",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:52"
            },
            {
              "label": "dampSpeedDown",
              "offset": 0,
              "slot": "217",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:54"
            },
            {
              "label": "maxFuturePools",
              "offset": 0,
              "slot": "218",
              "type": "t_uint8",
              "contract": "Market",
              "src": "contracts/Market.sol:57"
            },
            {
              "label": "lastAccumulatorAccrual",
              "offset": 1,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:59"
            },
            {
              "label": "lastFloatingDebtUpdate",
              "offset": 5,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:61"
            },
            {
              "label": "lastAverageUpdate",
              "offset": 9,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:63"
            },
            {
              "label": "interestRateModel",
              "offset": 0,
              "slot": "219",
              "type": "t_contract(InterestRateModel)15062",
              "contract": "Market",
              "src": "contracts/Market.sol:66"
            },
            {
              "label": "earningsAccumulatorSmoothFactor",
              "offset": 0,
              "slot": "220",
              "type": "t_uint128",
              "contract": "Market",
              "src": "contracts/Market.sol:69"
            },
            {
              "label": "reserveFactor",
              "offset": 16,
              "slot": "220",
              "type": "t_uint128",
              "contract": "Market",
              "src": "contracts/Market.sol:71"
            },
            {
              "label": "floatingAssets",
              "offset": 0,
              "slot": "221",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:74"
            },
            {
              "label": "floatingAssetsAverage",
              "offset": 0,
              "slot": "222",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:76"
            },
            {
              "label": "totalFloatingBorrowShares",
              "offset": 0,
              "slot": "223",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:79"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "224",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:83",
              "renamedFrom": "floatingUtilization"
            },
            {
              "label": "treasury",
              "offset": 0,
              "slot": "225",
              "type": "t_address",
              "contract": "Market",
              "src": "contracts/Market.sol:86"
            },
            {
              "label": "treasuryFeeRate",
              "offset": 0,
              "slot": "226",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:88"
            },
            {
              "label": "rewardsController",
              "offset": 0,
              "slot": "227",
              "type": "t_contract(RewardsController)23082",
              "contract": "Market",
              "src": "contracts/Market.sol:91"
            },
            {
              "label": "isFrozen",
              "offset": 20,
              "slot": "227",
              "type": "t_bool",
              "contract": "Market",
              "src": "contracts/Market.sol:94"
            },
            {
              "label": "returnValue",
              "offset": 0,
              "slot": "228",
              "type": "t_uint256",
              "contract": "MarketHarness",
              "src": "contracts/mocks/MarketHarness.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(InterestRateModel)15062": {
              "label": "contract InterestRateModel",
              "numberOfBytes": "20"
            },
            "t_contract(RewardsController)23082": {
              "label": "contract RewardsController",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Account)19124_storage)": {
              "label": "mapping(address => struct Market.Account)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Position)35054_storage)": {
              "label": "mapping(address => struct FixedLib.Position)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)35054_storage))": {
              "label": "mapping(uint256 => mapping(address => struct FixedLib.Position))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)35048_storage)": {
              "label": "mapping(uint256 => struct FixedLib.Pool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Account)19124_storage": {
              "label": "struct Market.Account",
              "members": [
                {
                  "label": "fixedDeposits",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fixedBorrows",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "floatingBorrowShares",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Pool)35048_storage": {
              "label": "struct FixedLib.Pool",
              "members": [
                {
                  "label": "borrowed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "supplied",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "unassignedEarnings",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastAccrual",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Position)35054_storage": {
              "label": "struct FixedLib.Position",
              "members": [
                {
                  "label": "principal",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "fee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)23_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MockBalancerVault.sol:IFlashLoanRecipient": {
        "src": "contracts/mocks/MockBalancerVault.sol:47",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveFlashLoan(contract ERC20[],uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MockBalancerVault.sol:MockBalancerVault": {
        "src": "contracts/mocks/MockBalancerVault.sol:8",
        "version": {
          "withMetadata": "3c3be034449c4f1be092d4b665f749bb0c1e30dcce27368d29f0e0ef5f24f49f",
          "withoutMetadata": "3d1c94327365b923b1d5be02880bc64b6f5c9f26ab3839516d06ccccb006079c",
          "linkedWithoutMetadata": "3d1c94327365b923b1d5be02880bc64b6f5c9f26ab3839516d06ccccb006079c"
        },
        "inherit": [
          "solmate/src/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "flashLoan(address,contract ERC20[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "locked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "solmate/src/utils/ReentrancyGuard.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MockBorrowRate.sol:MockBorrowRate": {
        "src": "contracts/mocks/MockBorrowRate.sol:6",
        "version": {
          "withMetadata": "ba878bfb845dd4ff1d7bfe06370938a1a9b00d0962cee7f2e542b17b78fca7d9",
          "withoutMetadata": "15ff6b6bac8e270c1838f4bd8b7654d1cc43609036d54f971d4882d631c50a93",
          "linkedWithoutMetadata": "15ff6b6bac8e270c1838f4bd8b7654d1cc43609036d54f971d4882d631c50a93"
        },
        "inherit": [],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib"
        ],
        "methods": [
          "(uint256)",
          "floatingRate(uint256,uint256)",
          "fixedRate(uint256,uint256,uint256,uint256,uint256)",
          "setRate(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockBorrowRate",
            "src": "contracts/mocks/MockBorrowRate.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "borrowRate",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MockBorrowRate",
              "src": "contracts/mocks/MockBorrowRate.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MockInterestRateModel.sol:MockInterestRateModel": {
        "src": "contracts/mocks/MockInterestRateModel.sol:4",
        "version": {
          "withMetadata": "05a6542149e93dd5313470e3989d0c8199dfef1a9345f147592d163efbdb39f3",
          "withoutMetadata": "c138ac0104826cdc563e2337b1d76807ea053a519f304c743f76b81c0420a35e",
          "linkedWithoutMetadata": "c138ac0104826cdc563e2337b1d76807ea053a519f304c743f76b81c0420a35e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(uint256)",
          "floatingRate(uint256)",
          "floatingRate(uint256,uint256)",
          "fixedRate(uint256,uint256,uint256,uint256,uint256)",
          "fixedBorrowRate(uint256,uint256,uint256,uint256,uint256)",
          "setRate(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockInterestRateModel",
            "src": "contracts/mocks/MockInterestRateModel.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "rate",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "MockInterestRateModel",
              "src": "contracts/mocks/MockInterestRateModel.sol:5"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MockPriceFeed.sol:MockPriceFeed": {
        "src": "contracts/mocks/MockPriceFeed.sol:7",
        "version": {
          "withMetadata": "c8b46bb3b0aa2a8a0796880297efdca6eebf78689d386a1ba93ebefeafe9f44c",
          "withoutMetadata": "4c7447e4fe1e85d9f2a79918715796481c7d409b1f5483b2cbeb49c41e6dc0fe",
          "linkedWithoutMetadata": "4c7447e4fe1e85d9f2a79918715796481c7d409b1f5483b2cbeb49c41e6dc0fe"
        },
        "inherit": [
          "contracts/utils/IPriceFeed.sol:IPriceFeed"
        ],
        "libraries": [],
        "methods": [
          "(uint8,int256)",
          "latestAnswer()",
          "setPrice(int256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockPriceFeed",
            "src": "contracts/mocks/MockPriceFeed.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "contracts/mocks/MockPriceFeed.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "price",
              "offset": 0,
              "slot": "0",
              "type": "t_int256",
              "contract": "MockPriceFeed",
              "src": "contracts/mocks/MockPriceFeed.sol:9"
            }
          ],
          "types": {
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MockStETH.sol:MockStETH": {
        "src": "contracts/mocks/MockStETH.sol:7",
        "version": {
          "withMetadata": "efb9ee1b4f119459c63ecba5b0cfb843620f66b87cfbaee2a37c4e1a0d6f842d",
          "withoutMetadata": "ead97d5b360df0e29c77c5b5b507bb1c83e370b97f6e1b4aaa426d4016347d54",
          "linkedWithoutMetadata": "ead97d5b360df0e29c77c5b5b507bb1c83e370b97f6e1b4aaa426d4016347d54"
        },
        "inherit": [
          "solmate/src/tokens/ERC20.sol:ERC20"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "getPooledEthByShares(uint256)",
          "setPooledEthByShares(uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockStETH",
            "src": "contracts/mocks/MockStETH.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            },
            {
              "label": "pooledEthByShares",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "MockStETH",
              "src": "contracts/mocks/MockStETH.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/mocks/MockWETH.sol:MockWETH": {
        "src": "contracts/mocks/MockWETH.sol:7",
        "version": {
          "withMetadata": "ae4d072c9cf19aaadce0e33beeaed1b0aa5e1013b47ae3ba44eee02989399967",
          "withoutMetadata": "cb1fd61366853db16df0919699fb4adb7881e7ebbdb4a6fd46750875e8c20013",
          "linkedWithoutMetadata": "cb1fd61366853db16df0919699fb4adb7881e7ebbdb4a6fd46750875e8c20013"
        },
        "inherit": [
          "solmate/src/tokens/WETH.sol:WETH",
          "solmate/src/tokens/ERC20.sol:ERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/Airdrop.sol:Airdrop": {
        "src": "contracts/periphery/Airdrop.sol:8",
        "version": {
          "withMetadata": "85871ef93e02ce038376f87e72637ceb9c87b618501d53bbb8da848dd845a82b",
          "withoutMetadata": "1902d678dde90fc50d36626ccf21f81aef429bd8ce33cfa7a9e82fb617fff0fa",
          "linkedWithoutMetadata": "1902d678dde90fc50d36626ccf21f81aef429bd8ce33cfa7a9e82fb617fff0fa"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "solmate/src/utils/MerkleProofLib.sol:MerkleProofLib",
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,bytes32,address)",
          "initialize()",
          "claim(uint128,bytes32[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Airdrop",
              "src": "contracts/periphery/Airdrop.sol:19"
            },
            {
              "label": "streams",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Airdrop",
              "src": "contracts/periphery/Airdrop.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/Airdrop.sol:ISablierV2LockupLinear": {
        "src": "contracts/periphery/Airdrop.sol:57",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/DebtManager.sol:DebtManager": {
        "src": "contracts/periphery/DebtManager.sol:17",
        "version": {
          "withMetadata": "b68bfeb5ac097dbd1821389e515e7278e96195068c639b8259d6294d3ae35489",
          "withoutMetadata": "84c162b3a1bbc69e2630463c53b48aec4b958e2320ad6c9934287cd807812c3e",
          "linkedWithoutMetadata": "84c162b3a1bbc69e2630463c53b48aec4b958e2320ad6c9934287cd807812c3e"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib",
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "contracts/utils/FixedLib.sol:FixedLib",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [
          "(address,address,address)",
          "initialize()",
          "leverage(address,uint256,uint256)",
          "leverage(address,uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32),(uint256,bytes))",
          "leverage(address,uint256,(address,uint256,uint256,uint8,bytes32,bytes32),(address,uint256,uint256,uint8,bytes32,bytes32))",
          "leverage(address,uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))",
          "deleverage(address,uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))",
          "deleverage(address,uint256,uint256)",
          "rollFixed(address,uint256,uint256,uint256,uint256,uint256)",
          "rollFixed(address,uint256,uint256,uint256,uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))",
          "rollFixedToFloating(address,uint256,uint256,uint256)",
          "rollFixedToFloating(address,uint256,uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))",
          "rollFloatingToFixed(address,uint256,uint256,uint256)",
          "rollFloatingToFixed(address,uint256,uint256,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))",
          "receiveFlashLoan(contract ERC20[],uint256[],uint256[],bytes)",
          "approve(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "callHash",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "DebtManager",
              "src": "contracts/periphery/DebtManager.sol:447"
            },
            {
              "label": "_msgSender",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "DebtManager",
              "src": "contracts/periphery/DebtManager.sol:475"
            },
            {
              "label": "_msgSenderSet",
              "offset": 20,
              "slot": "2",
              "type": "t_bool",
              "contract": "DebtManager",
              "src": "contracts/periphery/DebtManager.sol:476"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/DebtManager.sol:IBalancerVault": {
        "src": "contracts/periphery/DebtManager.sol:594",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(address,contract ERC20[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/DebtManager.sol:IPermit2": {
        "src": "contracts/periphery/DebtManager.sol:603",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/DebtPreviewer.sol:DebtPreviewer": {
        "src": "contracts/periphery/DebtPreviewer.sol:11",
        "version": {
          "withMetadata": "a17cecba00db7d6fffd5dc82f73a6e942ac3c2582c0ca7861a20439345e59382",
          "withoutMetadata": "05e95252fa6c58bca914e62a3c4ee0722151aaf761bfdc1b87f590cdaf4e5575",
          "linkedWithoutMetadata": "05e95252fa6c58bca914e62a3c4ee0722151aaf761bfdc1b87f590cdaf4e5575"
        },
        "inherit": [],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable",
          "contracts/utils/FixedLib.sol:FixedLib"
        ],
        "methods": [
          "(address)",
          "leverage(address,address,address,uint256)",
          "previewLeverage(address,address,address,uint256,uint256,uint256)",
          "previewDeleverage(address,address,address,uint256,uint256,uint256)",
          "leverageRates(address,address,address,int256,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/EXA.sol:EXA": {
        "src": "contracts/periphery/EXA.sol:8",
        "version": {
          "withMetadata": "8a872ec97c9675dcc2221b14d2803bcc201eeeee21130a180c0fe5ef4a5932a9",
          "withoutMetadata": "be1527ea3e9795aab113c7382b283d672f5f3c6181f575ea2ce90608ac8bf8c4",
          "linkedWithoutMetadata": "be1527ea3e9795aab113c7382b283d672f5f3c6181f575ea2ce90608ac8bf8c4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:ERC20VotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5805Upgradeable.sol:IERC5805Upgradeable",
          "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol:IVotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC6372Upgradeable.sol:IERC6372Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "103",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "104",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)3295_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:37"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1737_storage)dyn_storage)",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:38"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_struct(Checkpoint)1737_storage)dyn_storage",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:39"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "207",
              "type": "t_array(t_uint256)47_storage",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:302"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)1737_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]",
              "numberOfBytes": "1504"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1737_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)3295_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1737_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3295_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/EscrowedEXA.sol:EscrowedEXA": {
        "src": "contracts/periphery/EscrowedEXA.sol:14",
        "version": {
          "withMetadata": "f3d983d71dd94bba1180975f1a9a2f8f8e5a879f41472fbc1dc0aecedf56389e",
          "withoutMetadata": "18789e5aa3d3e6518946673b71872a88bd843d2c98e4d5723dd727f083c580fb",
          "linkedWithoutMetadata": "18789e5aa3d3e6518946673b71872a88bd843d2c98e4d5723dd727f083c580fb"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:ERC20VotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5805Upgradeable.sol:IERC5805Upgradeable",
          "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol:IVotesUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC6372Upgradeable.sol:IERC6372Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol:IERC5267Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib"
        ],
        "methods": [
          "(address,address)",
          "initialize(uint40,uint256)",
          "mint(uint256,address)",
          "redeem(uint256,address)",
          "vest(uint128,address,uint256,uint256)",
          "vest(uint128,address,uint256,uint256,(uint256,uint256,uint8,bytes32,bytes32))",
          "cancel(uint256[])",
          "withdrawMax(uint256[])",
          "onStreamCanceled(uint256,address,uint128,uint128)",
          "setVestingPeriod(uint40)",
          "setReserveRatio(uint256)",
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
            },
            {
              "label": "_hashedName",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
              "renamedFrom": "_HASHED_NAME"
            },
            {
              "label": "_hashedVersion",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
              "renamedFrom": "_HASHED_VERSION"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "103",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "104",
              "type": "t_string_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)48_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)3295_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_delegates",
              "offset": 0,
              "slot": "204",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:37"
            },
            {
              "label": "_checkpoints",
              "offset": 0,
              "slot": "205",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1737_storage)dyn_storage)",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:38"
            },
            {
              "label": "_totalSupplyCheckpoints",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_struct(Checkpoint)1737_storage)dyn_storage",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:39"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "207",
              "type": "t_array(t_uint256)47_storage",
              "contract": "ERC20VotesUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:302"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "254",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "304",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)23_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:57"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:260"
            },
            {
              "label": "reserveRatio",
              "offset": 0,
              "slot": "354",
              "type": "t_uint256",
              "contract": "EscrowedEXA",
              "src": "contracts/periphery/EscrowedEXA.sol:27"
            },
            {
              "label": "vestingPeriod",
              "offset": 0,
              "slot": "355",
              "type": "t_uint40",
              "contract": "EscrowedEXA",
              "src": "contracts/periphery/EscrowedEXA.sol:29"
            },
            {
              "label": "reserves",
              "offset": 0,
              "slot": "356",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "EscrowedEXA",
              "src": "contracts/periphery/EscrowedEXA.sol:31"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint)1737_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]",
              "numberOfBytes": "1504"
            },
            "t_array(t_uint256)48_storage": {
              "label": "uint256[48]",
              "numberOfBytes": "1536"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1737_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)3295_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)23_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)1737_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3295_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)23_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint40": {
              "label": "uint40",
              "numberOfBytes": "5"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/EscrowedEXA.sol:ISablierV2LockupLinear": {
        "src": "contracts/periphery/EscrowedEXA.sol:238",
        "inherit": [],
        "libraries": [],
        "methods": [
          "cancel(uint256)",
          "withdrawMax(uint256,address)",
          "isDepleted(uint256)",
          "getRecipient(uint256)",
          "refundableAmountOf(uint256)",
          "withdrawableAmountOf(uint256)",
          "createWithDurations((address,address,uint128,address,bool,bool,(uint40,uint40),(address,uint256)))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/InstallmentsRouter.sol:InstallmentsRouter": {
        "src": "contracts/periphery/InstallmentsRouter.sol:14",
        "version": {
          "withMetadata": "a330dee4e0b4cdb2597ad5726eef911ec752f80766f2c670ed592af9558ad951",
          "withoutMetadata": "f54db0dc63d1ddf0a2abcc0ee1f799d3ceb8fdb770ea0dabc53cb98e7d83ba41",
          "linkedWithoutMetadata": "f54db0dc63d1ddf0a2abcc0ee1f799d3ceb8fdb770ea0dabc53cb98e7d83ba41"
        },
        "inherit": [],
        "libraries": [
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib",
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "contracts/utils/FixedLib.sol:FixedLib"
        ],
        "methods": [
          "(address,address)",
          "borrow(address,uint256,uint256[],uint256)",
          "borrow(address,uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))",
          "borrowETH(uint256,uint256[],uint256)",
          "borrowETH(uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/Previewer.sol:Previewer": {
        "src": "contracts/periphery/Previewer.sol:15",
        "version": {
          "withMetadata": "b6e0929b9796cd18455b913b65f6d4f8dffdda65f65504e704ae7e2ae45fb8e9",
          "withoutMetadata": "2513c22d18aa7cb0075607a4b8646e0f944b52f6e50727f0fcb2b88f3776b416",
          "linkedWithoutMetadata": "2513c22d18aa7cb0075607a4b8646e0f944b52f6e50727f0fcb2b88f3776b416"
        },
        "inherit": [],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "contracts/utils/FixedLib.sol:FixedLib",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [
          "(address,address)",
          "exactly(address)",
          "previewDepositAtMaturity(address,uint256,uint256)",
          "previewDepositAtAllMaturities(address,uint256)",
          "previewBorrowAtMaturity(address,uint256,uint256)",
          "previewBorrowAtAllMaturities(address,uint256)",
          "previewWithdrawAtMaturity(address,uint256,uint256,address)",
          "previewRepayAtMaturity(address,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/Swapper.sol:IPermit2": {
        "src": "contracts/periphery/Swapper.sol:152",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/Swapper.sol:IPool": {
        "src": "contracts/periphery/Swapper.sol:180",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(uint256,uint256,address,bytes)",
          "getAmountOut(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/Swapper.sol:Swapper": {
        "src": "contracts/periphery/Swapper.sol:12",
        "version": {
          "withMetadata": "e948ca30b4b8c2ac5ba4d713cd734439227fbacdc34c34f64b7d897b2750a012",
          "withoutMetadata": "91df5de86ed42b8018e52f562c017887350ffcfd57297a112955f9498116eb58",
          "linkedWithoutMetadata": "91df5de86ed42b8018e52f562c017887350ffcfd57297a112955f9498116eb58"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:SafeERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable",
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "(address,address,address,address,address)",
          "swap(address payable,uint256,uint256)",
          "swap(address,uint256,bytes,uint256,uint256)",
          "swap(address,(uint256,uint256,uint8,bytes32,bytes32),bytes,uint256,uint256)",
          "swap(address,(uint256,uint256,bytes),bytes,uint256,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/VotePreviewer.sol:IBeefyVault": {
        "src": "contracts/periphery/VotePreviewer.sol:72",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/VotePreviewer.sol:IExtraLending": {
        "src": "contracts/periphery/VotePreviewer.sol:76",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPositionStatus(uint256[],address)",
          "exchangeRateOfReserve(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/VotePreviewer.sol:IPool": {
        "src": "contracts/periphery/VotePreviewer.sol:64",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "token0()",
          "reserve0()",
          "reserve1()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/periphery/VotePreviewer.sol:VotePreviewer": {
        "src": "contracts/periphery/VotePreviewer.sol:9",
        "version": {
          "withMetadata": "4fdf8e4d8c5649a23bab6be782119d8dc5aeef83ef1810186ad47e60498c761f",
          "withoutMetadata": "179a60b435b326c11bbdac54682a27e3ab07ad70c146fcd836b30ab6a6951cbe",
          "linkedWithoutMetadata": "179a60b435b326c11bbdac54682a27e3ab07ad70c146fcd836b30ab6a6951cbe"
        },
        "inherit": [],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib"
        ],
        "methods": [
          "(address,address,address,address,address,address,uint256)",
          "externalVotes(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/utils/FixedLib.sol:FixedLib": {
        "src": "contracts/utils/FixedLib.sol:7",
        "version": {
          "withMetadata": "0b2645a213c911a3ea2f284fa6581729f9afb5232d1d711f01017ade08ba5b61",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "contracts/utils/IPriceFeed.sol:IPriceFeed": {
        "src": "contracts/utils/IPriceFeed.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "latestAnswer()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/mixins/ERC4626.sol:ERC4626": {
        "src": "solmate/src/mixins/ERC4626.sol:10",
        "inherit": [
          "solmate/src/tokens/ERC20.sol:ERC20"
        ],
        "libraries": [
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib",
          "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib"
        ],
        "methods": [
          "deposit(uint256,address)",
          "mint(uint256,address)",
          "withdraw(uint256,address,address)",
          "redeem(uint256,address,address)",
          "totalAssets()",
          "convertToShares(uint256)",
          "convertToAssets(uint256)",
          "previewDeposit(uint256)",
          "previewMint(uint256)",
          "previewWithdraw(uint256)",
          "previewRedeem(uint256)",
          "maxDeposit(address)",
          "maxMint(address)",
          "maxWithdraw(address)",
          "maxRedeem(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC4626",
            "src": "solmate/src/mixins/ERC4626.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "asset",
            "src": "solmate/src/mixins/ERC4626.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/test/utils/mocks/MockERC20.sol:MockERC20": {
        "src": "solmate/src/test/utils/mocks/MockERC20.sol:6",
        "version": {
          "withMetadata": "55555eacb91b7a23139cc048c234777b268cdf99454855e814a7c7d9268de2fe",
          "withoutMetadata": "91c7003c199c2fddf0dac4933267c8976d2ea499eb2c217a6f01326a49416877",
          "linkedWithoutMetadata": "91c7003c199c2fddf0dac4933267c8976d2ea499eb2c217a6f01326a49416877"
        },
        "inherit": [
          "solmate/src/tokens/ERC20.sol:ERC20"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "solmate/src/test/utils/mocks/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/tokens/ERC20.sol:ERC20": {
        "src": "solmate/src/tokens/ERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "solmate/src/tokens/ERC20.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "decimals",
            "src": "solmate/src/tokens/ERC20.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_CHAIN_ID",
            "src": "solmate/src/tokens/ERC20.sol:41"
          },
          {
            "kind": "state-variable-immutable",
            "name": "INITIAL_DOMAIN_SEPARATOR",
            "src": "solmate/src/tokens/ERC20.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/tokens/WETH.sol:WETH": {
        "src": "solmate/src/tokens/WETH.sol:11",
        "version": {
          "withMetadata": "82aad20c879a914d64e2e2787e2db9e9c04e8765f31843bd30d876e0b7904a2e",
          "withoutMetadata": "b671cd7bb9fe0ba2c039afc3351ab770dafb51a5eadad5454e261d3c868d8801",
          "linkedWithoutMetadata": "b671cd7bb9fe0ba2c039afc3351ab770dafb51a5eadad5454e261d3c868d8801"
        },
        "inherit": [
          "solmate/src/tokens/ERC20.sol:ERC20"
        ],
        "libraries": [
          "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib"
        ],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:21"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:23"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:31"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:33"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:35"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "solmate/src/tokens/ERC20.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/utils/FixedPointMathLib.sol:FixedPointMathLib": {
        "src": "solmate/src/utils/FixedPointMathLib.sol:6",
        "version": {
          "withMetadata": "c9f0697bafc3500cb6e7d6f38ee90343b0bbe5e4b7ab5b81b4080eab19ef4a7f",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/utils/MerkleProofLib.sol:MerkleProofLib": {
        "src": "solmate/src/utils/MerkleProofLib.sol:6",
        "version": {
          "withMetadata": "bd6232cd1a1120a62f09e833bc9599e969735f8ffd4e598bef693f7ac1cd78f3",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "solmate/src/utils/ReentrancyGuard.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "locked",
            "src": "solmate/src/utils/ReentrancyGuard.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "locked",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "solmate/src/utils/ReentrancyGuard.sol:8"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      },
      "solmate/src/utils/SafeTransferLib.sol:SafeTransferLib": {
        "src": "solmate/src/utils/SafeTransferLib.sol:9",
        "version": {
          "withMetadata": "20db7229f0a62ab729e2ebbb59ef3f429629afb80c4a0f85736832d939a49d99",
          "withoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312",
          "linkedWithoutMetadata": "aef8899eac78fba7080b09fc141bbd85fea7f379041e693bd8f5e5e8ddf44312"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.25"
      }
    }
  ]
}