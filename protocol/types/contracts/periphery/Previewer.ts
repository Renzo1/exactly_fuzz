/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ParametersStruct = {
  minRate: BigNumberish;
  naturalRate: BigNumberish;
  maxUtilization: BigNumberish;
  naturalUtilization: BigNumberish;
  growthSpeed: BigNumberish;
  sigmoidSpeed: BigNumberish;
  spreadFactor: BigNumberish;
  maturitySpeed: BigNumberish;
  timePreference: BigNumberish;
  fixedAllocation: BigNumberish;
  maxRate: BigNumberish;
};

export type ParametersStructOutput = [
  minRate: bigint,
  naturalRate: bigint,
  maxUtilization: bigint,
  naturalUtilization: bigint,
  growthSpeed: bigint,
  sigmoidSpeed: bigint,
  spreadFactor: bigint,
  maturitySpeed: bigint,
  timePreference: bigint,
  fixedAllocation: bigint,
  maxRate: bigint
] & {
  minRate: bigint;
  naturalRate: bigint;
  maxUtilization: bigint;
  naturalUtilization: bigint;
  growthSpeed: bigint;
  sigmoidSpeed: bigint;
  spreadFactor: bigint;
  maturitySpeed: bigint;
  timePreference: bigint;
  fixedAllocation: bigint;
  maxRate: bigint;
};

export declare namespace Previewer {
  export type InterestRateModelStruct = {
    id: AddressLike;
    parameters: ParametersStruct;
  };

  export type InterestRateModelStructOutput = [
    id: string,
    parameters: ParametersStructOutput
  ] & { id: string; parameters: ParametersStructOutput };

  export type FixedPoolStruct = {
    maturity: BigNumberish;
    borrowed: BigNumberish;
    supplied: BigNumberish;
    available: BigNumberish;
    utilization: BigNumberish;
    depositRate: BigNumberish;
    minBorrowRate: BigNumberish;
    optimalDeposit: BigNumberish;
  };

  export type FixedPoolStructOutput = [
    maturity: bigint,
    borrowed: bigint,
    supplied: bigint,
    available: bigint,
    utilization: bigint,
    depositRate: bigint,
    minBorrowRate: bigint,
    optimalDeposit: bigint
  ] & {
    maturity: bigint;
    borrowed: bigint;
    supplied: bigint;
    available: bigint;
    utilization: bigint;
    depositRate: bigint;
    minBorrowRate: bigint;
    optimalDeposit: bigint;
  };

  export type RewardRateStruct = {
    asset: AddressLike;
    assetName: string;
    assetSymbol: string;
    usdPrice: BigNumberish;
    borrow: BigNumberish;
    floatingDeposit: BigNumberish;
    maturities: BigNumberish[];
  };

  export type RewardRateStructOutput = [
    asset: string,
    assetName: string,
    assetSymbol: string,
    usdPrice: bigint,
    borrow: bigint,
    floatingDeposit: bigint,
    maturities: bigint[]
  ] & {
    asset: string;
    assetName: string;
    assetSymbol: string;
    usdPrice: bigint;
    borrow: bigint;
    floatingDeposit: bigint;
    maturities: bigint[];
  };

  export type FixedPositionStruct = {
    maturity: BigNumberish;
    previewValue: BigNumberish;
    position: FixedLib.PositionStruct;
  };

  export type FixedPositionStructOutput = [
    maturity: bigint,
    previewValue: bigint,
    position: FixedLib.PositionStructOutput
  ] & {
    maturity: bigint;
    previewValue: bigint;
    position: FixedLib.PositionStructOutput;
  };

  export type ClaimableRewardStruct = {
    asset: AddressLike;
    assetName: string;
    assetSymbol: string;
    amount: BigNumberish;
  };

  export type ClaimableRewardStructOutput = [
    asset: string,
    assetName: string,
    assetSymbol: string,
    amount: bigint
  ] & { asset: string; assetName: string; assetSymbol: string; amount: bigint };

  export type MarketAccountStruct = {
    market: AddressLike;
    symbol: string;
    decimals: BigNumberish;
    asset: AddressLike;
    assetName: string;
    assetSymbol: string;
    interestRateModel: Previewer.InterestRateModelStruct;
    usdPrice: BigNumberish;
    penaltyRate: BigNumberish;
    adjustFactor: BigNumberish;
    maxFuturePools: BigNumberish;
    reserveFactor: BigNumberish;
    fixedPools: Previewer.FixedPoolStruct[];
    rewardRates: Previewer.RewardRateStruct[];
    floatingBorrowRate: BigNumberish;
    floatingUtilization: BigNumberish;
    floatingAssets: BigNumberish;
    floatingDebt: BigNumberish;
    floatingBackupBorrowed: BigNumberish;
    floatingAvailableAssets: BigNumberish;
    totalFloatingBorrowAssets: BigNumberish;
    totalFloatingDepositAssets: BigNumberish;
    totalFloatingBorrowShares: BigNumberish;
    totalFloatingDepositShares: BigNumberish;
    isCollateral: boolean;
    maxBorrowAssets: BigNumberish;
    floatingBorrowShares: BigNumberish;
    floatingBorrowAssets: BigNumberish;
    floatingDepositShares: BigNumberish;
    floatingDepositAssets: BigNumberish;
    fixedDepositPositions: Previewer.FixedPositionStruct[];
    fixedBorrowPositions: Previewer.FixedPositionStruct[];
    claimableRewards: Previewer.ClaimableRewardStruct[];
  };

  export type MarketAccountStructOutput = [
    market: string,
    symbol: string,
    decimals: bigint,
    asset: string,
    assetName: string,
    assetSymbol: string,
    interestRateModel: Previewer.InterestRateModelStructOutput,
    usdPrice: bigint,
    penaltyRate: bigint,
    adjustFactor: bigint,
    maxFuturePools: bigint,
    reserveFactor: bigint,
    fixedPools: Previewer.FixedPoolStructOutput[],
    rewardRates: Previewer.RewardRateStructOutput[],
    floatingBorrowRate: bigint,
    floatingUtilization: bigint,
    floatingAssets: bigint,
    floatingDebt: bigint,
    floatingBackupBorrowed: bigint,
    floatingAvailableAssets: bigint,
    totalFloatingBorrowAssets: bigint,
    totalFloatingDepositAssets: bigint,
    totalFloatingBorrowShares: bigint,
    totalFloatingDepositShares: bigint,
    isCollateral: boolean,
    maxBorrowAssets: bigint,
    floatingBorrowShares: bigint,
    floatingBorrowAssets: bigint,
    floatingDepositShares: bigint,
    floatingDepositAssets: bigint,
    fixedDepositPositions: Previewer.FixedPositionStructOutput[],
    fixedBorrowPositions: Previewer.FixedPositionStructOutput[],
    claimableRewards: Previewer.ClaimableRewardStructOutput[]
  ] & {
    market: string;
    symbol: string;
    decimals: bigint;
    asset: string;
    assetName: string;
    assetSymbol: string;
    interestRateModel: Previewer.InterestRateModelStructOutput;
    usdPrice: bigint;
    penaltyRate: bigint;
    adjustFactor: bigint;
    maxFuturePools: bigint;
    reserveFactor: bigint;
    fixedPools: Previewer.FixedPoolStructOutput[];
    rewardRates: Previewer.RewardRateStructOutput[];
    floatingBorrowRate: bigint;
    floatingUtilization: bigint;
    floatingAssets: bigint;
    floatingDebt: bigint;
    floatingBackupBorrowed: bigint;
    floatingAvailableAssets: bigint;
    totalFloatingBorrowAssets: bigint;
    totalFloatingDepositAssets: bigint;
    totalFloatingBorrowShares: bigint;
    totalFloatingDepositShares: bigint;
    isCollateral: boolean;
    maxBorrowAssets: bigint;
    floatingBorrowShares: bigint;
    floatingBorrowAssets: bigint;
    floatingDepositShares: bigint;
    floatingDepositAssets: bigint;
    fixedDepositPositions: Previewer.FixedPositionStructOutput[];
    fixedBorrowPositions: Previewer.FixedPositionStructOutput[];
    claimableRewards: Previewer.ClaimableRewardStructOutput[];
  };

  export type FixedPreviewStruct = {
    maturity: BigNumberish;
    assets: BigNumberish;
    utilization: BigNumberish;
  };

  export type FixedPreviewStructOutput = [
    maturity: bigint,
    assets: bigint,
    utilization: bigint
  ] & { maturity: bigint; assets: bigint; utilization: bigint };
}

export declare namespace FixedLib {
  export type PositionStruct = { principal: BigNumberish; fee: BigNumberish };

  export type PositionStructOutput = [principal: bigint, fee: bigint] & {
    principal: bigint;
    fee: bigint;
  };
}

export interface PreviewerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auditor"
      | "basePriceFeed"
      | "exactly"
      | "previewBorrowAtAllMaturities"
      | "previewBorrowAtMaturity"
      | "previewDepositAtAllMaturities"
      | "previewDepositAtMaturity"
      | "previewRepayAtMaturity"
      | "previewWithdrawAtMaturity"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "auditor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "basePriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exactly",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "previewBorrowAtAllMaturities",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewBorrowAtMaturity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDepositAtAllMaturities",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDepositAtMaturity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRepayAtMaturity",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdrawAtMaturity",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "auditor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactly", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewBorrowAtAllMaturities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewBorrowAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDepositAtAllMaturities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDepositAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRepayAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdrawAtMaturity",
    data: BytesLike
  ): Result;
}

export interface Previewer extends BaseContract {
  connect(runner?: ContractRunner | null): Previewer;
  waitForDeployment(): Promise<this>;

  interface: PreviewerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auditor: TypedContractMethod<[], [string], "view">;

  basePriceFeed: TypedContractMethod<[], [string], "view">;

  exactly: TypedContractMethod<
    [account: AddressLike],
    [Previewer.MarketAccountStructOutput[]],
    "view"
  >;

  previewBorrowAtAllMaturities: TypedContractMethod<
    [market: AddressLike, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput[]],
    "view"
  >;

  previewBorrowAtMaturity: TypedContractMethod<
    [market: AddressLike, maturity: BigNumberish, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;

  previewDepositAtAllMaturities: TypedContractMethod<
    [market: AddressLike, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput[]],
    "view"
  >;

  previewDepositAtMaturity: TypedContractMethod<
    [market: AddressLike, maturity: BigNumberish, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;

  previewRepayAtMaturity: TypedContractMethod<
    [
      market: AddressLike,
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      borrower: AddressLike
    ],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;

  previewWithdrawAtMaturity: TypedContractMethod<
    [
      market: AddressLike,
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      owner: AddressLike
    ],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auditor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "basePriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exactly"
  ): TypedContractMethod<
    [account: AddressLike],
    [Previewer.MarketAccountStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewBorrowAtAllMaturities"
  ): TypedContractMethod<
    [market: AddressLike, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewBorrowAtMaturity"
  ): TypedContractMethod<
    [market: AddressLike, maturity: BigNumberish, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewDepositAtAllMaturities"
  ): TypedContractMethod<
    [market: AddressLike, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewDepositAtMaturity"
  ): TypedContractMethod<
    [market: AddressLike, maturity: BigNumberish, assets: BigNumberish],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewRepayAtMaturity"
  ): TypedContractMethod<
    [
      market: AddressLike,
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      borrower: AddressLike
    ],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewWithdrawAtMaturity"
  ): TypedContractMethod<
    [
      market: AddressLike,
      maturity: BigNumberish,
      positionAssets: BigNumberish,
      owner: AddressLike
    ],
    [Previewer.FixedPreviewStructOutput],
    "view"
  >;

  filters: {};
}
