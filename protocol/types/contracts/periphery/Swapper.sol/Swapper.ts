/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type Permit2Struct = {
  amount: BigNumberish;
  deadline: BigNumberish;
  signature: BytesLike;
};

export type Permit2StructOutput = [
  amount: bigint,
  deadline: bigint,
  signature: string
] & { amount: bigint; deadline: bigint; signature: string };

export type PermitStruct = {
  value: BigNumberish;
  deadline: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type PermitStructOutput = [
  value: bigint,
  deadline: bigint,
  v: bigint,
  r: string,
  s: string
] & { value: bigint; deadline: bigint; v: bigint; r: string; s: string };

export interface SwapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "exa"
      | "permit2"
      | "pool"
      | "socket"
      | "swap(address,(uint256,uint256,bytes),bytes,uint256,uint256)"
      | "swap(address,uint256,uint256)"
      | "swap(address,(uint256,uint256,uint8,bytes32,bytes32),bytes,uint256,uint256)"
      | "swap(address,uint256,bytes,uint256,uint256)"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "exa", values?: undefined): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "socket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap(address,(uint256,uint256,bytes),bytes,uint256,uint256)",
    values: [AddressLike, Permit2Struct, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap(address,(uint256,uint256,uint8,bytes32,bytes32),bytes,uint256,uint256)",
    values: [AddressLike, PermitStruct, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap(address,uint256,bytes,uint256,uint256)",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "exa", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "socket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swap(address,(uint256,uint256,bytes),bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swap(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swap(address,(uint256,uint256,uint8,bytes32,bytes32),bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swap(address,uint256,bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export interface Swapper extends BaseContract {
  connect(runner?: ContractRunner | null): Swapper;
  waitForDeployment(): Promise<this>;

  interface: SwapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exa: TypedContractMethod<[], [string], "view">;

  permit2: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  socket: TypedContractMethod<[], [string], "view">;

  "swap(address,(uint256,uint256,bytes),bytes,uint256,uint256)": TypedContractMethod<
    [
      asset: AddressLike,
      permit: Permit2Struct,
      socketData: BytesLike,
      minEXA: BigNumberish,
      keepETH: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "swap(address,uint256,uint256)": TypedContractMethod<
    [account: AddressLike, minEXA: BigNumberish, keepETH: BigNumberish],
    [void],
    "payable"
  >;

  "swap(address,(uint256,uint256,uint8,bytes32,bytes32),bytes,uint256,uint256)": TypedContractMethod<
    [
      asset: AddressLike,
      permit: PermitStruct,
      socketData: BytesLike,
      minEXA: BigNumberish,
      keepETH: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "swap(address,uint256,bytes,uint256,uint256)": TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      socketData: BytesLike,
      minEXA: BigNumberish,
      keepETH: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exa"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "socket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swap(address,(uint256,uint256,bytes),bytes,uint256,uint256)"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      permit: Permit2Struct,
      socketData: BytesLike,
      minEXA: BigNumberish,
      keepETH: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swap(address,uint256,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, minEXA: BigNumberish, keepETH: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swap(address,(uint256,uint256,uint8,bytes32,bytes32),bytes,uint256,uint256)"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      permit: PermitStruct,
      socketData: BytesLike,
      minEXA: BigNumberish,
      keepETH: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swap(address,uint256,bytes,uint256,uint256)"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      socketData: BytesLike,
      minEXA: BigNumberish,
      keepETH: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
