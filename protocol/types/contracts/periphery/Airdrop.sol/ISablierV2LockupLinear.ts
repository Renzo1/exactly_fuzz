/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type DurationsStruct = { cliff: BigNumberish; total: BigNumberish };

export type DurationsStructOutput = [cliff: bigint, total: bigint] & {
  cliff: bigint;
  total: bigint;
};

export type BrokerStruct = { account: AddressLike; fee: BigNumberish };

export type BrokerStructOutput = [account: string, fee: bigint] & {
  account: string;
  fee: bigint;
};

export type CreateWithDurationsStruct = {
  sender: AddressLike;
  recipient: AddressLike;
  totalAmount: BigNumberish;
  asset: AddressLike;
  cancelable: boolean;
  durations: DurationsStruct;
  broker: BrokerStruct;
};

export type CreateWithDurationsStructOutput = [
  sender: string,
  recipient: string,
  totalAmount: bigint,
  asset: string,
  cancelable: boolean,
  durations: DurationsStructOutput,
  broker: BrokerStructOutput
] & {
  sender: string;
  recipient: string;
  totalAmount: bigint;
  asset: string;
  cancelable: boolean;
  durations: DurationsStructOutput;
  broker: BrokerStructOutput;
};

export interface ISablierV2LockupLinearInterface extends Interface {
  getFunction(nameOrSignature: "createWithDurations"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createWithDurations",
    values: [CreateWithDurationsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createWithDurations",
    data: BytesLike
  ): Result;
}

export interface ISablierV2LockupLinear extends BaseContract {
  connect(runner?: ContractRunner | null): ISablierV2LockupLinear;
  waitForDeployment(): Promise<this>;

  interface: ISablierV2LockupLinearInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createWithDurations: TypedContractMethod<
    [params: CreateWithDurationsStruct],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createWithDurations"
  ): TypedContractMethod<
    [params: CreateWithDurationsStruct],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
