/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FixedPoolHarnessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accrueEarnings"
      | "addFee"
      | "backupDebtAddition"
      | "backupDebtReduction"
      | "borrow"
      | "calculateDeposit"
      | "clearMaturity"
      | "deposit"
      | "distributeEarnings"
      | "fixedPool"
      | "lastBackupEarnings"
      | "lastEarningsTreasury"
      | "newAccountBorrows"
      | "nextTimestamp"
      | "reduceProportionally"
      | "removeFee"
      | "repay"
      | "scaleProportionally"
      | "scaledDebt"
      | "setMaturity"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accrueEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "backupDebtAddition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backupDebtReduction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDeposit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clearMaturity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeEarnings",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "fixedPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastBackupEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEarningsTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAccountBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reduceProportionally",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "scaleProportionally",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaturity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "backupDebtAddition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backupDebtReduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fixedPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBackupEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEarningsTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAccountBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceProportionally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scaleProportionally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scaledDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface FixedPoolHarness extends BaseContract {
  connect(runner?: ContractRunner | null): FixedPoolHarness;
  waitForDeployment(): Promise<this>;

  interface: FixedPoolHarnessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accrueEarnings: TypedContractMethod<
    [maturity: BigNumberish],
    [void],
    "nonpayable"
  >;

  addFee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  backupDebtAddition: TypedContractMethod<[], [bigint], "view">;

  backupDebtReduction: TypedContractMethod<[], [bigint], "view">;

  borrow: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  calculateDeposit: TypedContractMethod<
    [
      borrowed: BigNumberish,
      supplied: BigNumberish,
      unassignedEarnings: BigNumberish,
      lastAccrual: BigNumberish,
      amount: BigNumberish,
      backupFeeRate: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  clearMaturity: TypedContractMethod<
    [encoded: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  distributeEarnings: TypedContractMethod<
    [
      borrowed: BigNumberish,
      supplied: BigNumberish,
      unassignedEarnings: BigNumberish,
      lastAccrual: BigNumberish,
      earnings: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fixedPool: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        borrowed: bigint;
        supplied: bigint;
        unassignedEarnings: bigint;
        lastAccrual: bigint;
      }
    ],
    "view"
  >;

  lastBackupEarnings: TypedContractMethod<[], [bigint], "view">;

  lastEarningsTreasury: TypedContractMethod<[], [bigint], "view">;

  newAccountBorrows: TypedContractMethod<[], [bigint], "view">;

  nextTimestamp: TypedContractMethod<[], [bigint], "view">;

  reduceProportionally: TypedContractMethod<
    [
      scaledDebtPrincipal: BigNumberish,
      scaledDebtFee: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeFee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  repay: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  scaleProportionally: TypedContractMethod<
    [
      scaledDebtPrincipal: BigNumberish,
      scaledDebtFee: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  scaledDebt: TypedContractMethod<
    [],
    [[bigint, bigint] & { principal: bigint; fee: bigint }],
    "view"
  >;

  setMaturity: TypedContractMethod<
    [encoded: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [amountToDiscount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accrueEarnings"
  ): TypedContractMethod<[maturity: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "backupDebtAddition"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "backupDebtReduction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateDeposit"
  ): TypedContractMethod<
    [
      borrowed: BigNumberish,
      supplied: BigNumberish,
      unassignedEarnings: BigNumberish,
      lastAccrual: BigNumberish,
      amount: BigNumberish,
      backupFeeRate: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "clearMaturity"
  ): TypedContractMethod<
    [encoded: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeEarnings"
  ): TypedContractMethod<
    [
      borrowed: BigNumberish,
      supplied: BigNumberish,
      unassignedEarnings: BigNumberish,
      lastAccrual: BigNumberish,
      earnings: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fixedPool"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        borrowed: bigint;
        supplied: bigint;
        unassignedEarnings: bigint;
        lastAccrual: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastBackupEarnings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastEarningsTreasury"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "newAccountBorrows"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reduceProportionally"
  ): TypedContractMethod<
    [
      scaledDebtPrincipal: BigNumberish,
      scaledDebtFee: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scaleProportionally"
  ): TypedContractMethod<
    [
      scaledDebtPrincipal: BigNumberish,
      scaledDebtFee: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scaledDebt"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { principal: bigint; fee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMaturity"
  ): TypedContractMethod<
    [encoded: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [amountToDiscount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
