/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ParametersStruct = {
  minRate: BigNumberish;
  naturalRate: BigNumberish;
  maxUtilization: BigNumberish;
  naturalUtilization: BigNumberish;
  growthSpeed: BigNumberish;
  sigmoidSpeed: BigNumberish;
  spreadFactor: BigNumberish;
  maturitySpeed: BigNumberish;
  timePreference: BigNumberish;
  fixedAllocation: BigNumberish;
  maxRate: BigNumberish;
};

export type ParametersStructOutput = [
  minRate: bigint,
  naturalRate: bigint,
  maxUtilization: bigint,
  naturalUtilization: bigint,
  growthSpeed: bigint,
  sigmoidSpeed: bigint,
  spreadFactor: bigint,
  maturitySpeed: bigint,
  timePreference: bigint,
  fixedAllocation: bigint,
  maxRate: bigint
] & {
  minRate: bigint;
  naturalRate: bigint;
  maxUtilization: bigint;
  naturalUtilization: bigint;
  growthSpeed: bigint;
  sigmoidSpeed: bigint;
  spreadFactor: bigint;
  maturitySpeed: bigint;
  timePreference: bigint;
  fixedAllocation: bigint;
  maxRate: bigint;
};

export interface InterestRateModelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fixedAllocation"
      | "fixedBorrowRate"
      | "fixedCurveA"
      | "fixedCurveB"
      | "fixedMaxUtilization"
      | "fixedRate"
      | "floatingCurveA"
      | "floatingCurveB"
      | "floatingMaxUtilization"
      | "floatingRate(uint256,uint256)"
      | "floatingRate(uint256)"
      | "growthSpeed"
      | "market"
      | "maturitySpeed"
      | "maxRate"
      | "minFixedRate"
      | "naturalUtilization"
      | "parameters"
      | "sigmoidSpeed"
      | "spreadFactor"
      | "timePreference"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fixedAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedBorrowRate",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedCurveA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedCurveB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedMaxUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedRate",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "floatingCurveA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floatingCurveB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floatingMaxUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floatingRate(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floatingRate(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "growthSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maturitySpeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minFixedRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "naturalUtilization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sigmoidSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spreadFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timePreference",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "fixedAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedCurveA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedCurveB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedMaxUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fixedRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "floatingCurveA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floatingCurveB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floatingMaxUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floatingRate(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floatingRate(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maturitySpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "naturalUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sigmoidSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timePreference",
    data: BytesLike
  ): Result;
}

export interface InterestRateModel extends BaseContract {
  connect(runner?: ContractRunner | null): InterestRateModel;
  waitForDeployment(): Promise<this>;

  interface: InterestRateModelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fixedAllocation: TypedContractMethod<[], [bigint], "view">;

  fixedBorrowRate: TypedContractMethod<
    [
      maturity: BigNumberish,
      amount: BigNumberish,
      borrowed: BigNumberish,
      supplied: BigNumberish,
      arg4: BigNumberish
    ],
    [bigint],
    "view"
  >;

  fixedCurveA: TypedContractMethod<[], [bigint], "view">;

  fixedCurveB: TypedContractMethod<[], [bigint], "view">;

  fixedMaxUtilization: TypedContractMethod<[], [bigint], "view">;

  fixedRate: TypedContractMethod<
    [
      maturity: BigNumberish,
      maxPools: BigNumberish,
      uFixed: BigNumberish,
      uFloating: BigNumberish,
      uGlobal: BigNumberish
    ],
    [bigint],
    "view"
  >;

  floatingCurveA: TypedContractMethod<[], [bigint], "view">;

  floatingCurveB: TypedContractMethod<[], [bigint], "view">;

  floatingMaxUtilization: TypedContractMethod<[], [bigint], "view">;

  "floatingRate(uint256,uint256)": TypedContractMethod<
    [uFloating: BigNumberish, uGlobal: BigNumberish],
    [bigint],
    "view"
  >;

  "floatingRate(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  growthSpeed: TypedContractMethod<[], [bigint], "view">;

  market: TypedContractMethod<[], [string], "view">;

  maturitySpeed: TypedContractMethod<[], [bigint], "view">;

  maxRate: TypedContractMethod<[], [bigint], "view">;

  minFixedRate: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [[bigint, bigint] & { rate: bigint; utilization: bigint }],
    "view"
  >;

  naturalUtilization: TypedContractMethod<[], [bigint], "view">;

  parameters: TypedContractMethod<[], [ParametersStructOutput], "view">;

  sigmoidSpeed: TypedContractMethod<[], [bigint], "view">;

  spreadFactor: TypedContractMethod<[], [bigint], "view">;

  timePreference: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fixedAllocation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedBorrowRate"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      amount: BigNumberish,
      borrowed: BigNumberish,
      supplied: BigNumberish,
      arg4: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fixedCurveA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedCurveB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedMaxUtilization"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedRate"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      maxPools: BigNumberish,
      uFixed: BigNumberish,
      uFloating: BigNumberish,
      uGlobal: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "floatingCurveA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "floatingCurveB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "floatingMaxUtilization"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "floatingRate(uint256,uint256)"
  ): TypedContractMethod<
    [uFloating: BigNumberish, uGlobal: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "floatingRate(uint256)"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthSpeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maturitySpeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minFixedRate"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [[bigint, bigint] & { rate: bigint; utilization: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "naturalUtilization"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "parameters"
  ): TypedContractMethod<[], [ParametersStructOutput], "view">;
  getFunction(
    nameOrSignature: "sigmoidSpeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "spreadFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timePreference"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
