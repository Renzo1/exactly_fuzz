/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PermitStruct = {
  value: BigNumberish;
  deadline: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type PermitStructOutput = [
  value: bigint,
  deadline: bigint,
  v: bigint,
  r: string,
  s: string
] & { value: bigint; deadline: bigint; v: bigint; r: string; s: string };

export interface InstallmentsRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auditor"
      | "borrow(address,uint256,uint256[],uint256)"
      | "borrow(address,uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))"
      | "borrowETH(uint256,uint256[],uint256)"
      | "borrowETH(uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))"
      | "marketWETH"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "auditor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256,uint256[],uint256)",
    values: [AddressLike, BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      PermitStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowETH(uint256,uint256[],uint256)",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowETH(uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))",
    values: [BigNumberish, BigNumberish[], BigNumberish, PermitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "marketWETH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "auditor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256,uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowETH(uint256,uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowETH(uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketWETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
}

export interface InstallmentsRouter extends BaseContract {
  connect(runner?: ContractRunner | null): InstallmentsRouter;
  waitForDeployment(): Promise<this>;

  interface: InstallmentsRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auditor: TypedContractMethod<[], [string], "view">;

  "borrow(address,uint256,uint256[],uint256)": TypedContractMethod<
    [
      market: AddressLike,
      firstMaturity: BigNumberish,
      amounts: BigNumberish[],
      maxRepay: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  "borrow(address,uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))": TypedContractMethod<
    [
      market: AddressLike,
      firstMaturity: BigNumberish,
      amounts: BigNumberish[],
      maxRepay: BigNumberish,
      marketPermit: PermitStruct
    ],
    [bigint[]],
    "nonpayable"
  >;

  "borrowETH(uint256,uint256[],uint256)": TypedContractMethod<
    [maturity: BigNumberish, amounts: BigNumberish[], maxRepay: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;

  "borrowETH(uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))": TypedContractMethod<
    [
      maturity: BigNumberish,
      amounts: BigNumberish[],
      maxRepay: BigNumberish,
      marketPermit: PermitStruct
    ],
    [bigint[]],
    "nonpayable"
  >;

  marketWETH: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auditor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrow(address,uint256,uint256[],uint256)"
  ): TypedContractMethod<
    [
      market: AddressLike,
      firstMaturity: BigNumberish,
      amounts: BigNumberish[],
      maxRepay: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow(address,uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))"
  ): TypedContractMethod<
    [
      market: AddressLike,
      firstMaturity: BigNumberish,
      amounts: BigNumberish[],
      maxRepay: BigNumberish,
      marketPermit: PermitStruct
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowETH(uint256,uint256[],uint256)"
  ): TypedContractMethod<
    [maturity: BigNumberish, amounts: BigNumberish[], maxRepay: BigNumberish],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowETH(uint256,uint256[],uint256,(uint256,uint256,uint8,bytes32,bytes32))"
  ): TypedContractMethod<
    [
      maturity: BigNumberish,
      amounts: BigNumberish[],
      maxRepay: BigNumberish,
      marketPermit: PermitStruct
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketWETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
