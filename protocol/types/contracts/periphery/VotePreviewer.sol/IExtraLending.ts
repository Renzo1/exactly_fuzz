/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IExtraLending {
  export type PositionStatusStruct = {
    reserveId: BigNumberish;
    user: AddressLike;
    eTokenStaked: BigNumberish;
    eTokenUnStaked: BigNumberish;
    liquidity: BigNumberish;
  };

  export type PositionStatusStructOutput = [
    reserveId: bigint,
    user: string,
    eTokenStaked: bigint,
    eTokenUnStaked: bigint,
    liquidity: bigint
  ] & {
    reserveId: bigint;
    user: string;
    eTokenStaked: bigint;
    eTokenUnStaked: bigint;
    liquidity: bigint;
  };
}

export interface IExtraLendingInterface extends Interface {
  getFunction(
    nameOrSignature: "exchangeRateOfReserve" | "getPositionStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exchangeRateOfReserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionStatus",
    values: [BigNumberish[], AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "exchangeRateOfReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionStatus",
    data: BytesLike
  ): Result;
}

export interface IExtraLending extends BaseContract {
  connect(runner?: ContractRunner | null): IExtraLending;
  waitForDeployment(): Promise<this>;

  interface: IExtraLendingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exchangeRateOfReserve: TypedContractMethod<
    [reserveId: BigNumberish],
    [bigint],
    "view"
  >;

  getPositionStatus: TypedContractMethod<
    [reserveIds: BigNumberish[], account: AddressLike],
    [IExtraLending.PositionStatusStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exchangeRateOfReserve"
  ): TypedContractMethod<[reserveId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionStatus"
  ): TypedContractMethod<
    [reserveIds: BigNumberish[], account: AddressLike],
    [IExtraLending.PositionStatusStructOutput[]],
    "view"
  >;

  filters: {};
}
