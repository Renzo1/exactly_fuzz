/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ClaimPermitStruct = {
  owner: AddressLike;
  assets: AddressLike[];
  deadline: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type ClaimPermitStructOutput = [
  owner: string,
  assets: string[],
  deadline: bigint,
  v: bigint,
  r: string,
  s: string
] & {
  owner: string;
  assets: string[];
  deadline: bigint;
  v: bigint;
  r: string;
  s: string;
};

export declare namespace RewardsController {
  export type ConfigStruct = {
    market: AddressLike;
    reward: AddressLike;
    priceFeed: AddressLike;
    start: BigNumberish;
    distributionPeriod: BigNumberish;
    targetDebt: BigNumberish;
    totalDistribution: BigNumberish;
    undistributedFactor: BigNumberish;
    flipSpeed: BigNumberish;
    compensationFactor: BigNumberish;
    transitionFactor: BigNumberish;
    borrowAllocationWeightFactor: BigNumberish;
    depositAllocationWeightAddend: BigNumberish;
    depositAllocationWeightFactor: BigNumberish;
  };

  export type ConfigStructOutput = [
    market: string,
    reward: string,
    priceFeed: string,
    start: bigint,
    distributionPeriod: bigint,
    targetDebt: bigint,
    totalDistribution: bigint,
    undistributedFactor: bigint,
    flipSpeed: bigint,
    compensationFactor: bigint,
    transitionFactor: bigint,
    borrowAllocationWeightFactor: bigint,
    depositAllocationWeightAddend: bigint,
    depositAllocationWeightFactor: bigint
  ] & {
    market: string;
    reward: string;
    priceFeed: string;
    start: bigint;
    distributionPeriod: bigint;
    targetDebt: bigint;
    totalDistribution: bigint;
    undistributedFactor: bigint;
    flipSpeed: bigint;
    compensationFactor: bigint;
    transitionFactor: bigint;
    borrowAllocationWeightFactor: bigint;
    depositAllocationWeightAddend: bigint;
    depositAllocationWeightFactor: bigint;
  };

  export type MarketOperationStruct = {
    market: AddressLike;
    operations: boolean[];
  };

  export type MarketOperationStructOutput = [
    market: string,
    operations: boolean[]
  ] & { market: string; operations: boolean[] };
}

export interface RewardsControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_SEPARATOR"
      | "UTILIZATION_CAP"
      | "accountOperation"
      | "allClaimable"
      | "allMarketsOperations"
      | "allRewards"
      | "availableRewardsCount"
      | "claim((address,bool[])[],(address,address[],uint256,uint8,bytes32,bytes32))"
      | "claim((address,bool[])[],address,address[])"
      | "claimAll"
      | "claimable"
      | "config"
      | "distribution"
      | "distributionTime"
      | "getRoleAdmin"
      | "grantRole"
      | "handleBorrow"
      | "handleDeposit"
      | "hasRole"
      | "initialize"
      | "marketList"
      | "nonces"
      | "previewAllocation"
      | "renounceRole"
      | "revokeRole"
      | "rewardConfig"
      | "rewardEnabled"
      | "rewardIndexes"
      | "rewardList"
      | "supportsInterface"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Accrue"
      | "Claim"
      | "DistributionSet"
      | "IndexUpdate"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UTILIZATION_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountOperation",
    values: [AddressLike, AddressLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allClaimable",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allMarketsOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableRewardsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim((address,bool[])[],(address,address[],uint256,uint8,bytes32,bytes32))",
    values: [RewardsController.MarketOperationStruct[], ClaimPermitStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claim((address,bool[])[],address,address[])",
    values: [
      RewardsController.MarketOperationStruct[],
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAll",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [
      RewardsController.MarketOperationStruct[],
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "config",
    values: [RewardsController.ConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distribution",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionTime",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleBorrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "previewAllocation",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardConfig",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIndexes",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UTILIZATION_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allMarketsOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableRewardsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim((address,bool[])[],(address,address[],uint256,uint8,bytes32,bytes32))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim((address,bool[])[],address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AccrueEvent {
  export type InputTuple = [
    market: AddressLike,
    reward: AddressLike,
    account: AddressLike,
    operation: boolean,
    accountIndex: BigNumberish,
    operationIndex: BigNumberish,
    rewardsAccrued: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    reward: string,
    account: string,
    operation: boolean,
    accountIndex: bigint,
    operationIndex: bigint,
    rewardsAccrued: bigint
  ];
  export interface OutputObject {
    market: string;
    reward: string;
    account: string;
    operation: boolean;
    accountIndex: bigint;
    operationIndex: bigint;
    rewardsAccrued: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    account: AddressLike,
    reward: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    reward: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    account: string;
    reward: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionSetEvent {
  export type InputTuple = [
    market: AddressLike,
    reward: AddressLike,
    config: RewardsController.ConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    reward: string,
    config: RewardsController.ConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    reward: string;
    config: RewardsController.ConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexUpdateEvent {
  export type InputTuple = [
    market: AddressLike,
    reward: AddressLike,
    borrowIndex: BigNumberish,
    depositIndex: BigNumberish,
    newUndistributed: BigNumberish,
    lastUpdate: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    reward: string,
    borrowIndex: bigint,
    depositIndex: bigint,
    newUndistributed: bigint,
    lastUpdate: bigint
  ];
  export interface OutputObject {
    market: string;
    reward: string;
    borrowIndex: bigint;
    depositIndex: bigint;
    newUndistributed: bigint;
    lastUpdate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardsController extends BaseContract {
  connect(runner?: ContractRunner | null): RewardsController;
  waitForDeployment(): Promise<this>;

  interface: RewardsControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  UTILIZATION_CAP: TypedContractMethod<[], [bigint], "view">;

  accountOperation: TypedContractMethod<
    [
      account: AddressLike,
      market: AddressLike,
      operation: boolean,
      reward: AddressLike
    ],
    [[bigint, bigint]],
    "view"
  >;

  allClaimable: TypedContractMethod<
    [account: AddressLike, reward: AddressLike],
    [bigint],
    "view"
  >;

  allMarketsOperations: TypedContractMethod<
    [],
    [RewardsController.MarketOperationStructOutput[]],
    "view"
  >;

  allRewards: TypedContractMethod<[], [string[]], "view">;

  availableRewardsCount: TypedContractMethod<
    [market: AddressLike],
    [bigint],
    "view"
  >;

  "claim((address,bool[])[],(address,address[],uint256,uint8,bytes32,bytes32))": TypedContractMethod<
    [
      marketOps: RewardsController.MarketOperationStruct[],
      permit: ClaimPermitStruct
    ],
    [[string[], bigint[]] & { claimedAmounts: bigint[] }],
    "nonpayable"
  >;

  "claim((address,bool[])[],address,address[])": TypedContractMethod<
    [
      marketOps: RewardsController.MarketOperationStruct[],
      to: AddressLike,
      rewardsList: AddressLike[]
    ],
    [[string[], bigint[]] & { claimedAmounts: bigint[] }],
    "nonpayable"
  >;

  claimAll: TypedContractMethod<
    [to: AddressLike],
    [
      [string[], bigint[]] & { rewardsList: string[]; claimedAmounts: bigint[] }
    ],
    "nonpayable"
  >;

  claimable: TypedContractMethod<
    [
      marketOps: RewardsController.MarketOperationStruct[],
      account: AddressLike,
      reward: AddressLike
    ],
    [bigint],
    "view"
  >;

  config: TypedContractMethod<
    [configs: RewardsController.ConfigStruct[]],
    [void],
    "nonpayable"
  >;

  distribution: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { availableRewardsCount: bigint; baseUnit: bigint }],
    "view"
  >;

  distributionTime: TypedContractMethod<
    [market: AddressLike, reward: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  handleBorrow: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  handleDeposit: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  marketList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  previewAllocation: TypedContractMethod<
    [market: AddressLike, reward: AddressLike, deltaTime: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        borrowIndex: bigint;
        depositIndex: bigint;
        newUndistributed: bigint;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardConfig: TypedContractMethod<
    [market: AddressLike, reward: AddressLike],
    [RewardsController.ConfigStructOutput],
    "view"
  >;

  rewardEnabled: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  rewardIndexes: TypedContractMethod<
    [market: AddressLike, reward: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  rewardList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [asset: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UTILIZATION_CAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountOperation"
  ): TypedContractMethod<
    [
      account: AddressLike,
      market: AddressLike,
      operation: boolean,
      reward: AddressLike
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "allClaimable"
  ): TypedContractMethod<
    [account: AddressLike, reward: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allMarketsOperations"
  ): TypedContractMethod<
    [],
    [RewardsController.MarketOperationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "allRewards"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "availableRewardsCount"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim((address,bool[])[],(address,address[],uint256,uint8,bytes32,bytes32))"
  ): TypedContractMethod<
    [
      marketOps: RewardsController.MarketOperationStruct[],
      permit: ClaimPermitStruct
    ],
    [[string[], bigint[]] & { claimedAmounts: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim((address,bool[])[],address,address[])"
  ): TypedContractMethod<
    [
      marketOps: RewardsController.MarketOperationStruct[],
      to: AddressLike,
      rewardsList: AddressLike[]
    ],
    [[string[], bigint[]] & { claimedAmounts: bigint[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimAll"
  ): TypedContractMethod<
    [to: AddressLike],
    [
      [string[], bigint[]] & { rewardsList: string[]; claimedAmounts: bigint[] }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimable"
  ): TypedContractMethod<
    [
      marketOps: RewardsController.MarketOperationStruct[],
      account: AddressLike,
      reward: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [configs: RewardsController.ConfigStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distribution"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { availableRewardsCount: bigint; baseUnit: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributionTime"
  ): TypedContractMethod<
    [market: AddressLike, reward: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleBorrow"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "handleDeposit"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "marketList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewAllocation"
  ): TypedContractMethod<
    [market: AddressLike, reward: AddressLike, deltaTime: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        borrowIndex: bigint;
        depositIndex: bigint;
        newUndistributed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardConfig"
  ): TypedContractMethod<
    [market: AddressLike, reward: AddressLike],
    [RewardsController.ConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardEnabled"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "rewardIndexes"
  ): TypedContractMethod<
    [market: AddressLike, reward: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [asset: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Accrue"
  ): TypedContractEvent<
    AccrueEvent.InputTuple,
    AccrueEvent.OutputTuple,
    AccrueEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "DistributionSet"
  ): TypedContractEvent<
    DistributionSetEvent.InputTuple,
    DistributionSetEvent.OutputTuple,
    DistributionSetEvent.OutputObject
  >;
  getEvent(
    key: "IndexUpdate"
  ): TypedContractEvent<
    IndexUpdateEvent.InputTuple,
    IndexUpdateEvent.OutputTuple,
    IndexUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "Accrue(address,address,address,bool,uint256,uint256,uint256)": TypedContractEvent<
      AccrueEvent.InputTuple,
      AccrueEvent.OutputTuple,
      AccrueEvent.OutputObject
    >;
    Accrue: TypedContractEvent<
      AccrueEvent.InputTuple,
      AccrueEvent.OutputTuple,
      AccrueEvent.OutputObject
    >;

    "Claim(address,address,address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "DistributionSet(address,address,tuple)": TypedContractEvent<
      DistributionSetEvent.InputTuple,
      DistributionSetEvent.OutputTuple,
      DistributionSetEvent.OutputObject
    >;
    DistributionSet: TypedContractEvent<
      DistributionSetEvent.InputTuple,
      DistributionSetEvent.OutputTuple,
      DistributionSetEvent.OutputObject
    >;

    "IndexUpdate(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      IndexUpdateEvent.InputTuple,
      IndexUpdateEvent.OutputTuple,
      IndexUpdateEvent.OutputObject
    >;
    IndexUpdate: TypedContractEvent<
      IndexUpdateEvent.InputTuple,
      IndexUpdateEvent.OutputTuple,
      IndexUpdateEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
