/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Auditor {
  export type LiquidationIncentiveStruct = {
    liquidator: BigNumberish;
    lenders: BigNumberish;
  };

  export type LiquidationIncentiveStructOutput = [
    liquidator: bigint,
    lenders: bigint
  ] & { liquidator: bigint; lenders: bigint };
}

export interface AuditorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ASSETS_THRESHOLD"
      | "BASE_FEED"
      | "DEFAULT_ADMIN_ROLE"
      | "TARGET_HEALTH"
      | "accountLiquidity"
      | "accountMarkets"
      | "allMarkets"
      | "assetPrice"
      | "calculateSeize"
      | "checkBorrow"
      | "checkLiquidation"
      | "checkSeize"
      | "checkShortfall"
      | "enableMarket"
      | "enterMarket"
      | "exitMarket"
      | "getRoleAdmin"
      | "grantRole"
      | "handleBadDebt"
      | "hasRole"
      | "initialize"
      | "liquidationIncentive"
      | "marketList"
      | "markets"
      | "priceDecimals"
      | "renounceRole"
      | "revokeRole"
      | "setAdjustFactor"
      | "setLiquidationIncentive"
      | "setPriceFeed"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdjustFactorSet"
      | "Initialized"
      | "LiquidationIncentiveSet"
      | "MarketEntered"
      | "MarketExited"
      | "MarketListed"
      | "PriceFeedSet"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ASSETS_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BASE_FEED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TARGET_HEALTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountLiquidity",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accountMarkets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSeize",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBorrow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidation",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSeize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkShortfall",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMarket",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exitMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleBadDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [Auditor.LiquidationIncentiveStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationIncentive",
    values: [Auditor.LiquidationIncentiveStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ASSETS_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BASE_FEED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_HEALTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateSeize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkSeize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkShortfall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleBadDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AdjustFactorSetEvent {
  export type InputTuple = [market: AddressLike, adjustFactor: BigNumberish];
  export type OutputTuple = [market: string, adjustFactor: bigint];
  export interface OutputObject {
    market: string;
    adjustFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationIncentiveSetEvent {
  export type InputTuple = [
    liquidationIncentive: Auditor.LiquidationIncentiveStruct
  ];
  export type OutputTuple = [
    liquidationIncentive: Auditor.LiquidationIncentiveStructOutput
  ];
  export interface OutputObject {
    liquidationIncentive: Auditor.LiquidationIncentiveStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketEnteredEvent {
  export type InputTuple = [market: AddressLike, account: AddressLike];
  export type OutputTuple = [market: string, account: string];
  export interface OutputObject {
    market: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketExitedEvent {
  export type InputTuple = [market: AddressLike, account: AddressLike];
  export type OutputTuple = [market: string, account: string];
  export interface OutputObject {
    market: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketListedEvent {
  export type InputTuple = [market: AddressLike, decimals: BigNumberish];
  export type OutputTuple = [market: string, decimals: bigint];
  export interface OutputObject {
    market: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedSetEvent {
  export type InputTuple = [market: AddressLike, priceFeed: AddressLike];
  export type OutputTuple = [market: string, priceFeed: string];
  export interface OutputObject {
    market: string;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Auditor extends BaseContract {
  connect(runner?: ContractRunner | null): Auditor;
  waitForDeployment(): Promise<this>;

  interface: AuditorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ASSETS_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  BASE_FEED: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  TARGET_HEALTH: TypedContractMethod<[], [bigint], "view">;

  accountLiquidity: TypedContractMethod<
    [
      account: AddressLike,
      marketToSimulate: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [[bigint, bigint] & { sumCollateral: bigint; sumDebtPlusEffects: bigint }],
    "view"
  >;

  accountMarkets: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  allMarkets: TypedContractMethod<[], [string[]], "view">;

  assetPrice: TypedContractMethod<[priceFeed: AddressLike], [bigint], "view">;

  calculateSeize: TypedContractMethod<
    [
      repayMarket: AddressLike,
      seizeMarket: AddressLike,
      borrower: AddressLike,
      actualRepayAssets: BigNumberish
    ],
    [[bigint, bigint] & { lendersAssets: bigint; seizeAssets: bigint }],
    "view"
  >;

  checkBorrow: TypedContractMethod<
    [market: AddressLike, borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  checkLiquidation: TypedContractMethod<
    [
      repayMarket: AddressLike,
      seizeMarket: AddressLike,
      borrower: AddressLike,
      maxLiquidatorAssets: BigNumberish
    ],
    [bigint],
    "view"
  >;

  checkSeize: TypedContractMethod<
    [repayMarket: AddressLike, seizeMarket: AddressLike],
    [void],
    "view"
  >;

  checkShortfall: TypedContractMethod<
    [market: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "view"
  >;

  enableMarket: TypedContractMethod<
    [market: AddressLike, priceFeed: AddressLike, adjustFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  enterMarket: TypedContractMethod<[market: AddressLike], [void], "nonpayable">;

  exitMarket: TypedContractMethod<[market: AddressLike], [void], "nonpayable">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  handleBadDebt: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [liquidationIncentive_: Auditor.LiquidationIncentiveStruct],
    [void],
    "nonpayable"
  >;

  liquidationIncentive: TypedContractMethod<
    [],
    [[bigint, bigint] & { liquidator: bigint; lenders: bigint }],
    "view"
  >;

  marketList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  markets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, string] & {
        adjustFactor: bigint;
        decimals: bigint;
        index: bigint;
        isListed: boolean;
        priceFeed: string;
      }
    ],
    "view"
  >;

  priceDecimals: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAdjustFactor: TypedContractMethod<
    [market: AddressLike, adjustFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationIncentive: TypedContractMethod<
    [liquidationIncentive_: Auditor.LiquidationIncentiveStruct],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [market: AddressLike, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ASSETS_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASE_FEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TARGET_HEALTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountLiquidity"
  ): TypedContractMethod<
    [
      account: AddressLike,
      marketToSimulate: AddressLike,
      withdrawAmount: BigNumberish
    ],
    [[bigint, bigint] & { sumCollateral: bigint; sumDebtPlusEffects: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "accountMarkets"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "allMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "assetPrice"
  ): TypedContractMethod<[priceFeed: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateSeize"
  ): TypedContractMethod<
    [
      repayMarket: AddressLike,
      seizeMarket: AddressLike,
      borrower: AddressLike,
      actualRepayAssets: BigNumberish
    ],
    [[bigint, bigint] & { lendersAssets: bigint; seizeAssets: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkBorrow"
  ): TypedContractMethod<
    [market: AddressLike, borrower: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkLiquidation"
  ): TypedContractMethod<
    [
      repayMarket: AddressLike,
      seizeMarket: AddressLike,
      borrower: AddressLike,
      maxLiquidatorAssets: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkSeize"
  ): TypedContractMethod<
    [repayMarket: AddressLike, seizeMarket: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkShortfall"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike, amount: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "enableMarket"
  ): TypedContractMethod<
    [market: AddressLike, priceFeed: AddressLike, adjustFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enterMarket"
  ): TypedContractMethod<[market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitMarket"
  ): TypedContractMethod<[market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleBadDebt"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [liquidationIncentive_: Auditor.LiquidationIncentiveStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationIncentive"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { liquidator: bigint; lenders: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, string] & {
        adjustFactor: bigint;
        decimals: bigint;
        index: bigint;
        isListed: boolean;
        priceFeed: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdjustFactor"
  ): TypedContractMethod<
    [market: AddressLike, adjustFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationIncentive"
  ): TypedContractMethod<
    [liquidationIncentive_: Auditor.LiquidationIncentiveStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<
    [market: AddressLike, priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "AdjustFactorSet"
  ): TypedContractEvent<
    AdjustFactorSetEvent.InputTuple,
    AdjustFactorSetEvent.OutputTuple,
    AdjustFactorSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationIncentiveSet"
  ): TypedContractEvent<
    LiquidationIncentiveSetEvent.InputTuple,
    LiquidationIncentiveSetEvent.OutputTuple,
    LiquidationIncentiveSetEvent.OutputObject
  >;
  getEvent(
    key: "MarketEntered"
  ): TypedContractEvent<
    MarketEnteredEvent.InputTuple,
    MarketEnteredEvent.OutputTuple,
    MarketEnteredEvent.OutputObject
  >;
  getEvent(
    key: "MarketExited"
  ): TypedContractEvent<
    MarketExitedEvent.InputTuple,
    MarketExitedEvent.OutputTuple,
    MarketExitedEvent.OutputObject
  >;
  getEvent(
    key: "MarketListed"
  ): TypedContractEvent<
    MarketListedEvent.InputTuple,
    MarketListedEvent.OutputTuple,
    MarketListedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedSet"
  ): TypedContractEvent<
    PriceFeedSetEvent.InputTuple,
    PriceFeedSetEvent.OutputTuple,
    PriceFeedSetEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AdjustFactorSet(address,uint256)": TypedContractEvent<
      AdjustFactorSetEvent.InputTuple,
      AdjustFactorSetEvent.OutputTuple,
      AdjustFactorSetEvent.OutputObject
    >;
    AdjustFactorSet: TypedContractEvent<
      AdjustFactorSetEvent.InputTuple,
      AdjustFactorSetEvent.OutputTuple,
      AdjustFactorSetEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidationIncentiveSet(tuple)": TypedContractEvent<
      LiquidationIncentiveSetEvent.InputTuple,
      LiquidationIncentiveSetEvent.OutputTuple,
      LiquidationIncentiveSetEvent.OutputObject
    >;
    LiquidationIncentiveSet: TypedContractEvent<
      LiquidationIncentiveSetEvent.InputTuple,
      LiquidationIncentiveSetEvent.OutputTuple,
      LiquidationIncentiveSetEvent.OutputObject
    >;

    "MarketEntered(address,address)": TypedContractEvent<
      MarketEnteredEvent.InputTuple,
      MarketEnteredEvent.OutputTuple,
      MarketEnteredEvent.OutputObject
    >;
    MarketEntered: TypedContractEvent<
      MarketEnteredEvent.InputTuple,
      MarketEnteredEvent.OutputTuple,
      MarketEnteredEvent.OutputObject
    >;

    "MarketExited(address,address)": TypedContractEvent<
      MarketExitedEvent.InputTuple,
      MarketExitedEvent.OutputTuple,
      MarketExitedEvent.OutputObject
    >;
    MarketExited: TypedContractEvent<
      MarketExitedEvent.InputTuple,
      MarketExitedEvent.OutputTuple,
      MarketExitedEvent.OutputObject
    >;

    "MarketListed(address,uint8)": TypedContractEvent<
      MarketListedEvent.InputTuple,
      MarketListedEvent.OutputTuple,
      MarketListedEvent.OutputObject
    >;
    MarketListed: TypedContractEvent<
      MarketListedEvent.InputTuple,
      MarketListedEvent.OutputTuple,
      MarketListedEvent.OutputObject
    >;

    "PriceFeedSet(address,address)": TypedContractEvent<
      PriceFeedSetEvent.InputTuple,
      PriceFeedSetEvent.OutputTuple,
      PriceFeedSetEvent.OutputObject
    >;
    PriceFeedSet: TypedContractEvent<
      PriceFeedSetEvent.InputTuple,
      PriceFeedSetEvent.OutputTuple,
      PriceFeedSetEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
